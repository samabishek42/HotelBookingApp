[33mcommit 0c8052d26eb6b801ebbb4989e19f6371b760cb40[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
Author: sam <samabi93593@gmail.com>
Date:   Mon Dec 9 22:05:38 2024 +0530

    Removed secrets from application.properties

[1mdiff --git a/BookingService/src/main/resources/application.properties b/BookingService/src/main/resources/application.properties[m
[1mindex 512f236..d079637 100644[m
[1m--- a/BookingService/src/main/resources/application.properties[m
[1m+++ b/BookingService/src/main/resources/application.properties[m
[36m@@ -6,12 +6,6 @@[m [mspring.jpa.hibernate.ddl-auto=update[m
 spring.jpa.show-sql=true[m
 [m
 [m
[31m-#[m
 [m
 [m
 # Enable detailed security logs (for debugging)[m
[1mdiff --git a/HotelService/src/main/resources/application.properties b/HotelService/src/main/resources/application.properties[m
[1mindex f50fb58..ef54722 100644[m
[1m--- a/HotelService/src/main/resources/application.properties[m
[1m+++ b/HotelService/src/main/resources/application.properties[m
[36m@@ -7,14 +7,6 @@[m [mspring.jpa.show-sql=true[m
 [m
 [m
 [m
[31m-## OAuth2 Client Registration[m
[31m-[m
[31m-[m
[31m-[m
 # Enable detailed security logs (for debugging)[m
 logging.level.org.springframework.security=DEBUG[m
 [m
[1mdiff --git a/RoomsService/src/main/resources/application.properties b/RoomsService/src/main/resources/application.properties[m
[1mindex c8be7f0..f7951fa 100644[m
[1m--- a/RoomsService/src/main/resources/application.properties[m
[1m+++ b/RoomsService/src/main/resources/application.properties[m
[36m@@ -6,13 +6,6 @@[m [mspring.jpa.hibernate.ddl-auto=update[m
 spring.jpa.show-sql=true[m
 [m
 [m
[31m-#[m
git add service-registry/
[31m-#[m
 [m
 # Enable detailed security logs (for debugging)[m
 logging.level.org.springframework.security=DEBUG[m
[1mdiff --git a/UserService/src/main/resources/application.properties b/UserService/src/main/resources/application.properties[m
[1mindex 4aa7515..4d9ee0c 100644[m
[1m--- a/UserService/src/main/resources/application.properties[m
[1m+++ b/UserService/src/main/resources/application.properties[m
[36m@@ -8,11 +8,6 @@[m [mspring.jpa.show-sql=true[m
 [m
 [m
 [m
 [m
 # Enable detailed security logs (for debugging)[m
 logging.level.org.springframework.security=DEBUG[m
[1mdiff --git a/api-gatewayyy/src/main/resources/application.properties b/api-gatewayyy/src/main/resources/application.properties[m
[1mindex 8f9062c..03a83af 100644[m
[1m--- a/api-gatewayyy/src/main/resources/application.properties[m
[1m+++ b/api-gatewayyy/src/main/resources/application.properties[m
[36m@@ -10,13 +10,6 @@[m [meureka.instance.hostname=localhost[m
 [m
 [m
 [m
[31m-[m
[31m-[m
 [m
 logging.level.com.netflix.discovery=DEBUG[m
 logging.level.org.springframework.cloud.netflix.eureka=DEBUG[m
[1mdiff --git a/service-registry b/service-registry[m
[1mnew file mode 160000[m
[1mindex 0000000..e2eaa72[m
[1m--- /dev/null[m
[1m+++ b/service-registry[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mSubproject commit e2eaa7297c7c478f789286827dc012a2c7039ef7[m

[33mcommit d5632ae664429b76f933a6e9b745a7d976ce6723[m
Author: sam <samabi93593@gmail.com>
Date:   Mon Dec 9 22:00:06 2024 +0530

    Initial commit with service files

[1mdiff --git a/service-registry b/service-registry[m
[1mdeleted file mode 160000[m
[1mindex e2eaa72..0000000[m
[1m--- a/service-registry[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-Subproject commit e2eaa7297c7c478f789286827dc012a2c7039ef7[m

[33mcommit 4b3b01f93cff3e911da5d6ef9b72eb9b59dae545[m
Author: sam <samabi93593@gmail.com>
Date:   Mon Dec 9 21:47:29 2024 +0530

    Initial commit with service files

[1mdiff --git a/BookingService/.gitattributes b/BookingService/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..3b41682[m
[1m--- /dev/null[m
[1m+++ b/BookingService/.gitattributes[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m/mvnw text eol=lf[m
[32m+[m[32m*.cmd text eol=crlf[m
[1mdiff --git a/BookingService/.gitignore b/BookingService/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..549e00a[m
[1m--- /dev/null[m
[1m+++ b/BookingService/.gitignore[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mHELP.md[m
[32m+[m[32mtarget/[m
[32m+[m[32m!.mvn/wrapper/maven-wrapper.jar[m
[32m+[m[32m!**/src/main/**/target/[m
[32m+[m[32m!**/src/test/**/target/[m
[32m+[m
[32m+[m[32m### STS ###[m
[32m+[m[32m.apt_generated[m
[32m+[m[32m.classpath[m
[32m+[m[32m.factorypath[m
[32m+[m[32m.project[m
[32m+[m[32m.settings[m
[32m+[m[32m.springBeans[m
[32m+[m[32m.sts4-cache[m
[32m+[m
[32m+[m[32m### IntelliJ IDEA ###[m
[32m+[m[32m.idea[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m
[32m+[m[32m### NetBeans ###[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/.nb-gradle/[m
[32m+[m[32mbuild/[m
[32m+[m[32m!**/src/main/**/build/[m
[32m+[m[32m!**/src/test/**/build/[m
[32m+[m
[32m+[m[32m### VS Code ###[m
[32m+[m[32m.vscode/[m
[1mdiff --git a/BookingService/.mvn/wrapper/maven-wrapper.properties b/BookingService/.mvn/wrapper/maven-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..d58dfb7[m
[1m--- /dev/null[m
[1m+++ b/BookingService/.mvn/wrapper/maven-wrapper.properties[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#   http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32mwrapperVersion=3.3.2[m
[32m+[m[32mdistributionType=only-script[m
[32m+[m[32mdistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip[m
[1mdiff --git a/BookingService/mvnw b/BookingService/mvnw[m
[1mnew file mode 100644[m
[1mindex 0000000..19529dd[m
[1m--- /dev/null[m
[1m+++ b/BookingService/mvnw[m
[36m@@ -0,0 +1,259 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m#[m
[32m+[m[32m# Optional ENV vars[m
[32m+[m[32m# -----------------[m
[32m+[m[32m#   JAVA_HOME - location of a JDK home dir, required when download maven via java source[m
[32m+[m[32m#   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mset -euf[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != debug ] || set -x[m
[32m+[m
[32m+[m[32m# OS specific support.[m
[32m+[m[32mnative_path() { printf %s\\n "$1"; }[m
[32m+[m[32mcase "$(uname)" in[m
[32m+[m[32mCYGWIN* | MINGW*)[m
[32m+[m[32m  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"[m
[32m+[m[32m  native_path() { cygpath --path --windows "$1"; }[m
[32m+[m[32m  ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# set JAVACMD and JAVACCMD[m
[32m+[m[32mset_java_home() {[m
[32m+[m[32m  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched[m
[32m+[m[32m  if [ -n "${JAVA_HOME-}" ]; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ]; then[m
[32m+[m[32m      # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/jre/sh/javac"[m
[32m+[m[32m    else[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/bin/javac"[m
[32m+[m
[32m+[m[32m      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then[m
[32m+[m[32m        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2[m
[32m+[m[32m        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2[m
[32m+[m[32m        return 1[m
[32m+[m[32m      fi[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    JAVACMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v java[m
[32m+[m[32m    )" || :[m
[32m+[m[32m    JAVACCMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v javac[m
[32m+[m[32m    )" || :[m
[32m+[m
[32m+[m[32m    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then[m
[32m+[m[32m      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2[m
[32m+[m[32m      return 1[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# hash string like Java String::hashCode[m
[32m+[m[32mhash_string() {[m
[32m+[m[32m  str="${1:-}" h=0[m
[32m+[m[32m  while [ -n "$str" ]; do[m
[32m+[m[32m    char="${str%"${str#?}"}"[m
[32m+[m[32m    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))[m
[32m+[m[32m    str="${str#?}"[m
[32m+[m[32m  done[m
[32m+[m[32m  printf %x\\n $h[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mverbose() { :; }[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }[m
[32m+[m
[32m+[m[32mdie() {[m
[32m+[m[32m  printf %s\\n "$1" >&2[m
[32m+[m[32m  exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtrim() {[m
[32m+[m[32m  # MWRAPPER-139:[m
[32m+[m[32m  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.[m
[32m+[m[32m  #   Needed for removing poorly interpreted newline sequences when running in more[m
[32m+[m[32m  #   exotic environments such as mingw bash on Windows.[m
[32m+[m[32m  printf "%s" "${1}" | tr -d '[:space:]'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32mwhile IFS="=" read -r key value; do[m
[32m+[m[32m  case "${key-}" in[m
[32m+[m[32m  distributionUrl) distributionUrl=$(trim "${value-}") ;;[m
[32m+[m[32m  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m
[32m+[m[32mcase "${distributionUrl##*/}" in[m
[32m+[m[32mmaven-mvnd-*bin.*)[m
[32m+[m[32m  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/[m
[32m+[m[32m  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in[m
[32m+[m[32m  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;[m
[32m+[m[32m  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;[m
[32m+[m[32m  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;[m
[32m+[m[32m  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;[m
[32m+[m[32m  *)[m
[32m+[m[32m    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2[m
[32m+[m[32m    distributionPlatform=linux-amd64[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32m  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"[m
[32m+[m[32m  ;;[m
[32m+[m[32mmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;[m
[32m+[m[32m*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32m[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"[m
[32m+[m[32mdistributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlName%.*}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlNameMain%-bin}"[m
[32m+[m[32mMAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"[m
[32m+[m[32mMAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"[m
[32m+[m
[32m+[m[32mexec_maven() {[m
[32m+[m[32m  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :[m
[32m+[m[32m  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif [ -d "$MAVEN_HOME" ]; then[m
[32m+[m[32m  verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  exec_maven "$@"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mcase "${distributionUrl-}" in[m
[32m+[m[32m*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;[m
[32m+[m[32m*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32mif TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then[m
[32m+[m[32m  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }[m
[32m+[m[32m  trap clean HUP INT TERM EXIT[m
[32m+[m[32melse[m
[32m+[m[32m  die "cannot create temp dir"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mmkdir -p -- "${MAVEN_HOME%/*}"[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mverbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mverbose "Downloading from: $distributionUrl"[m
[32m+[m[32mverbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m# select .zip or .tar.gz[m
[32m+[m[32mif ! command -v unzip >/dev/null; then[m
[32m+[m[32m  distributionUrl="${distributionUrl%.zip}.tar.gz"[m
[32m+[m[32m  distributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# verbose opt[m
[32m+[m[32m__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v[m
[32m+[m
[32m+[m[32m# normalize http auth[m
[32m+[m[32mcase "${MVNW_PASSWORD:+has-password}" in[m
[32m+[m[32m'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mhas-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mif [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then[m
[32m+[m[32m  verbose "Found wget ... using wget"[m
[32m+[m[32m  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"[m
[32m+[m[32melif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then[m
[32m+[m[32m  verbose "Found curl ... using curl"[m
[32m+[m[32m  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"[m
[32m+[m[32melif set_java_home; then[m
[32m+[m[32m  verbose "Falling back to use Java to download"[m
[32m+[m[32m  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"[m
[32m+[m[32m  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m[32m  cat >"$javaSource" <<-END[m
[32m+[m	[32mpublic class Downloader extends java.net.Authenticator[m
[32m+[m	[32m{[m
[32m+[m	[32m  protected java.net.PasswordAuthentication getPasswordAuthentication()[m
[32m+[m	[32m  {[m
[32m+[m	[32m    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m  public static void main( String[] args ) throws Exception[m
[32m+[m	[32m  {[m
[32m+[m	[32m    setDefault( new Downloader() );[m
[32m+[m	[32m    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m}[m
[32m+[m	[32mEND[m
[32m+[m[32m  # For Cygwin/MinGW, switch paths to Windows format before running javac and java[m
[32m+[m[32m  verbose " - Compiling Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"[m
[32m+[m[32m  verbose " - Running Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32mif [ -n "${distributionSha256Sum-}" ]; then[m
[32m+[m[32m  distributionSha256Result=false[m
[32m+[m[32m  if [ "$MVN_CMD" = mvnd.sh ]; then[m
[32m+[m[32m    echo "Checksum validation is not supported for maven-mvnd." >&2[m
[32m+[m[32m    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  elif command -v sha256sum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  elif command -v shasum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2[m
[32m+[m[32m    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32m  if [ $distributionSha256Result = false ]; then[m
[32m+[m[32m    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2[m
[32m+[m[32m    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mif command -v unzip >/dev/null; then[m
[32m+[m[32m  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"[m
[32m+[m[32melse[m
[32m+[m[32m  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"[m
[32m+[m[32mfi[m
[32m+[m[32mprintf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"[m
[32m+[m[32mmv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"[m
[32m+[m
[32m+[m[32mclean || :[m
[32m+[m[32mexec_maven "$@"[m
[1mdiff --git a/BookingService/mvnw.cmd b/BookingService/mvnw.cmd[m
[1mnew file mode 100644[m
[1mindex 0000000..249bdf3[m
[1m--- /dev/null[m
[1m+++ b/BookingService/mvnw.cmd[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<# : batch portion[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m@REM or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m@REM distributed with this work for additional information[m
[32m+[m[32m@REM regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m@REM to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m@REM "License"); you may not use this file except in compliance[m
[32m+[m[32m@REM with the License.  You may obtain a copy of the License at[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m@REM software distributed under the License is distributed on an[m
[32m+[m[32m@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m@REM KIND, either express or implied.  See the License for the[m
[32m+[m[32m@REM specific language governing permissions and limitations[m
[32m+[m[32m@REM under the License.[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Optional ENV vars[m
[32m+[m[32m@REM   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)[m
[32m+[m[32m@SET __MVNW_CMD__=[m
[32m+[m[32m@SET __MVNW_ERROR__=[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%[m
[32m+[m[32m@SET PSModulePath=[m
[32m+[m[32m@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @([m
[32m+[m[32m  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)[m
[32m+[m[32m)[m
[32m+[m[32m@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=[m
[32m+[m[32m@SET __MVNW_ARG0_NAME__=[m
[32m+[m[32m@SET MVNW_USERNAME=[m
[32m+[m[32m@SET MVNW_PASSWORD=[m
[32m+[m[32m@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)[m
[32m+[m[32m@echo Cannot start maven from wrapper >&2 && exit /b 1[m
[32m+[m[32m@GOTO :EOF[m
[32m+[m[32m: end batch / begin powershell #>[m
[32m+[m
[32m+[m[32m$ErrorActionPreference = "Stop"[m
[32m+[m[32mif ($env:MVNW_VERBOSE -eq "true") {[m
[32m+[m[32m  $VerbosePreference = "Continue"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32m$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl[m
[32m+[m[32mif (!$distributionUrl) {[m
[32m+[m[32m  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {[m
[32m+[m[32m  "maven-mvnd-*" {[m
[32m+[m[32m    $USE_MVND = $true[m
[32m+[m[32m    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"[m
[32m+[m[32m    $MVN_CMD = "mvnd.cmd"[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m  default {[m
[32m+[m[32m    $USE_MVND = $false[m
[32m+[m[32m    $MVN_CMD = $script -replace '^mvnw','mvn'[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32mif ($env:MVNW_REPOURL) {[m
[32m+[m[32m  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }[m
[32m+[m[32m  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"[m
[32m+[m[32m}[m
[32m+[m[32m$distributionUrlName = $distributionUrl -replace '^.*/',''[m
[32m+[m[32m$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''[m
[32m+[m[32m$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32mif ($env:MAVEN_USER_HOME) {[m
[32m+[m[32m  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32m}[m
[32m+[m[32m$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''[m
[32m+[m[32m$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"[m
[32m+[m
[32m+[m[32mif (Test-Path -Path "$MAVEN_HOME" -PathType Container) {[m
[32m+[m[32m  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m  exit $?[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {[m
[32m+[m[32m  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile[m
[32m+[m[32m$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null[m
[32m+[m[32mtrap {[m
[32m+[m[32m  if ($TMP_DOWNLOAD_DIR.Exists) {[m
[32m+[m[32m    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mNew-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mWrite-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mWrite-Verbose "Downloading from: $distributionUrl"[m
[32m+[m[32mWrite-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m$webclient = New-Object System.Net.WebClient[m
[32m+[m[32mif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {[m
[32m+[m[32m  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)[m
[32m+[m[32m}[m
[32m+[m[32m[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12[m
[32m+[m[32m$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32m$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum[m
[32m+[m[32mif ($distributionSha256Sum) {[m
[32m+[m[32m  if ($USE_MVND) {[m
[32m+[m[32m    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."[m
[32m+[m[32m  }[m
[32m+[m[32m  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash[m
[32m+[m[32m  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {[m
[32m+[m[32m    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mExpand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null[m
[32m+[m[32mRename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null[m
[32m+[m[32mtry {[m
[32m+[m[32m  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null[m
[32m+[m[32m} catch {[m
[32m+[m[32m  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {[m
[32m+[m[32m    Write-Error "fail to move MAVEN_HOME"[m
[32m+[m[32m  }[m
[32m+[m[32m} finally {[m
[32m+[m[32m  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mWrite-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[1mdiff --git a/BookingService/pom.xml b/BookingService/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..3ea381d[m
[1m--- /dev/null[m
[1m+++ b/BookingService/pom.xml[m
[36m@@ -0,0 +1,115 @@[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m		[32m xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.1.4</version>[m
[32m+[m		[32m<relativePath/>[m
[32m+[m	[32m</parent>[m
[32m+[m	[32m<groupId>sb</groupId>[m
[32m+[m	[32m<artifactId>HotelBooking</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m	[32m<name>HotelBooking</name>[m
[32m+[m	[32m<description>Demo project for Spring Boot</description>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>17</java.version>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>2022.0.4</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<!-- Spring Boot Starters -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-data-jpa</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-oauth2-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-openfeign</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- JWT Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Lombok -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<version>1.18.30</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- MySQL Driver -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.mysql</groupId>[m
[32m+[m			[32m<artifactId>mysql-connector-j</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- DevTools -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-devtools</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Test Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m[32m</project>[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/BookingServiceApplication.java b/BookingService/src/main/java/com/HavenHub/booking_service/BookingServiceApplication.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ce6cb34[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/BookingServiceApplication.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service;[m
[32m+[m
[32m+[m[32mimport org.springframework.boot.SpringApplication;[m
[32m+[m[32mimport org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.EnableFeignClients;[m
[32m+[m
[32m+[m[32m@SpringBootApplication[m
[32m+[m[32m@EnableFeignClients[m
[32m+[m[32mpublic class BookingServiceApplication {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSpringApplication.run(BookingServiceApplication.class, args);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/DTO/BookingDTO.java b/BookingService/src/main/java/com/HavenHub/booking_service/DTO/BookingDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f3394c2[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/DTO/BookingDTO.java[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.DTO;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class BookingDTO {[m
[32m+[m
[32m+[m[32m      private int user_id;[m
[32m+[m
[32m+[m[32m      private LocalDate bookingDate;[m
[32m+[m
[32m+[m[32m      private LocalDate checkInDate;[m
[32m+[m
[32m+[m[32m      private  LocalDate checkOutDate;[m
[32m+[m
[32m+[m[32m      private String status;[m
[32m+[m
[32m+[m[32m      private int TotalAmount;[m
[32m+[m
[32m+[m[32m      private String payments;[m
[32m+[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      private int single_room;[m
[32m+[m
[32m+[m[32m      private int double_room;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/DTO/UserPrincipalDTO.java b/BookingService/src/main/java/com/HavenHub/booking_service/DTO/UserPrincipalDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..58f7d63[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/DTO/UserPrincipalDTO.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.DTO;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class UserPrincipalDTO implements UserDetails {[m
[32m+[m
[32m+[m[32m      private HotelUser user;[m
[32m+[m
[32m+[m[32m      public UserPrincipalDTO(HotelUser user) {[m
[32m+[m[32m            this.user=user;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m            return Collections.singleton(new SimpleGrantedAuthority(user.getType()));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getPassword() {[m
[32m+[m[32m            return user.getPassword();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getUsername() {[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonLocked() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isCredentialsNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isEnabled() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/Feign/UserInterface.java b/BookingService/src/main/java/com/HavenHub/booking_service/Feign/UserInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..28942ff[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/Feign/UserInterface.java[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.Feign;[m
[32m+[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.GetMapping;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.PathVariable;[m
[32m+[m
[32m+[m[32m@FeignClient("USER-SERVICE")[m
[32m+[m
[32m+[m[32mpublic interface UserInterface {[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByEmail/{email}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByEmail(@PathVariable("email") String email);[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByName/{name}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByName(@PathVariable("name") String name);[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/configuration/JWTFilter.java b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/JWTFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9896d36[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/JWTFilter.java[m
[36m@@ -0,0 +1,103 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.service.JWTService;[m
[32m+[m[32mimport com.HavenHub.booking_service.service.MyUserDetailsService;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.ApplicationContext;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32mpublic class JWTFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      ApplicationContext context;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      MyUserDetailsService myUserDetailsService;[m
[32m+[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {[m
[32m+[m[32m//[m
[32m+[m[32m//            String authHeader=request.getHeader("Authorization");[m
[32m+[m[32m//            String token=null;[m
[32m+[m[32m//            String username=null;[m
[32m+[m[32m//[m
[32m+[m[32m//            if(authHeader!=null&&authHeader.startsWith("Bearer ")){[m
[32m+[m[32m//                  token=authHeader.substring(7);[m
[32m+[m[32m//                  username=jwtService.extractUserName(token);[m
[32m+[m[32m//            }[m
[32m+[m[32m//            if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null){[m
[32m+[m[32m//                  UserDetails userDetails=context.getBean(MyUserDetailsService.class).[m
[32m+[m[32m//                          loadUserByUsername(username);[m
[32m+[m[32m//                  if(jwtService.validateTokens(token,userDetails)){[m
[32m+[m[32m//                        UsernamePasswordAuthenticationToken authenticationToken=[m
[32m+[m[32m//                                new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());[m
[32m+[m[32m//                        authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m//                        SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m//                  }[m
[32m+[m[32m//            }[m
[32m+[m[32m//            filterChain.doFilter(request,response);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)[m
[32m+[m[32m              throws ServletException, IOException {[m
[32m+[m
[32m+[m[32m            String authHeader = request.getHeader("Authorization");[m
[32m+[m[32m            String token = null;[m
[32m+[m[32m            String username = null;[m
[32m+[m
[32m+[m[32m            // Validate the Authorization header[m
[32m+[m[32m            if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m                  filterChain.doFilter(request, response);[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Extract the token[m
[32m+[m[32m            token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                  // Extract username from token[m
[32m+[m[32m                  username = jwtService.extractUserName(token);[m
[32m+[m
[32m+[m[32m                  if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                        // Load user details[m
[32m+[m[32m                        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);[m
[32m+[m
[32m+[m[32m                        // Validate the token[m
[32m+[m[32m                        if (jwtService.validateTokens(token, userDetails)) {[m
[32m+[m[32m                              UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                                      new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m                              authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                              SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                              logger.warn("Invalid JWT token for user: " + username);[m
[32m+[m[32m                        }[m
[32m+[m[32m                  }[m
[32m+[m[32m            } catch (Exception ex) {[m
[32m+[m[32m                  logger.error("Error during JWT validation: ", ex);[m
[32m+[m[32m                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                  response.getWriter().write("Unauthorized");[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/configuration/SecurityConfig.java b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/SecurityConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..95b1991[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/SecurityConfig.java[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.configuration;[m
[32m+[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.config.Customizer;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@EnableWebSecurity[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m            return http.csrf(AbstractHttpConfigurer::disable) // Disable CSRF[m
[32m+[m[32m                    .cors(Customizer.withDefaults()) // Enable CORS if required[m
[32m+[m[32m                    .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m                            .anyRequest().permitAll() // Allow all requests[m
[32m+[m[32m                    )[m
[32m+[m[32m                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Stateless session[m
[32m+[m[32m                    .build();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/configuration/WebConfig.java b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/WebConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7dfeba1[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/configuration/WebConfig.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.configuration;[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mclass WebConfig implements WebMvcConfigurer {[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m            registry.addMapping("/api/v1/**") // Apply to all paths[m
[32m+[m[32m                    .allowedOrigins("http://localhost:3000") // Allow frontend origin[m
[32m+[m[32m                    .allowedMethods("GET", "POST", "PUT", "DELETE","PATCH") // Allowed HTTP methods[m
[32m+[m[32m                    .allowedHeaders("*"); // Allow all headers[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/controller/BookingController.java b/BookingService/src/main/java/com/HavenHub/booking_service/controller/BookingController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..81784d1[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/controller/BookingController.java[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.DTO.BookingDTO;[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.Booking;[m
[32m+[m[32mimport com.HavenHub.booking_service.service.BookingService;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/booking")[m
[32m+[m[32mpublic class BookingController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      BookingService bs;[m
[32m+[m
[32m+[m[32m      @PostMapping(path="/save")[m
[32m+[m[32m      public ResponseEntity<String> saveBooking(@RequestBody BookingDTO booking){[m
[32m+[m[32m            return new ResponseEntity<>(bs.addBooking(booking),HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "/getOne/{user_id}")[m
[32m+[m[32m      public ResponseEntity<List<Booking>> getBookedRoomsByUser(@PathVariable("user_id") int user_id){[m
[32m+[m[32m            List<Booking> list= bs.bookedRoomsByUser(user_id);[m
[32m+[m[32m            if(list.isEmpty())[m
[32m+[m[32m                  return new ResponseEntity<>(list, HttpStatus.NOT_FOUND);[m
[32m+[m[32m            return new ResponseEntity<>(list,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "getAll/{hotel_id}/{check_in_date}")[m
[32m+[m[32m      public ResponseEntity<List<Booking>> getAllRooms(@PathVariable("hotel_id") int hotel_id,[m
[32m+[m[32m                                                       @PathVariable("check_in_date") LocalDate date){[m
[32m+[m[32m            List<Booking> list=bs.getAllRoomsHotel(hotel_id,date);[m
[32m+[m[32m            if(list.isEmpty())[m
[32m+[m[32m                  return new ResponseEntity<>(list,HttpStatus.NOT_FOUND);[m
[32m+[m[32m            return new ResponseEntity<>(list,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @PutMapping(path = "/cancel/{booking_id}")[m
[32m+[m[32m      public ResponseEntity<String>  updateCancelled(@PathVariable("booking_id") int booking_id){[m
[32m+[m[32m            return new ResponseEntity<>(bs.update(booking_id),HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/entity/Booking.java b/BookingService/src/main/java/com/HavenHub/booking_service/entity/Booking.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f9c5d71[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/entity/Booking.java[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "bookings")[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class Booking {[m
[32m+[m
[32m+[m[32m      @Id[m
[32m+[m[32m      @GeneratedValue(strategy = GenerationType.AUTO)[m
[32m+[m[32m      @Column(name = "booking_id")[m
[32m+[m[32m      private int booking_id;[m
[32m+[m
[32m+[m[32m      @Column(name = "user_id", nullable = false)  // Foreign key reference to User.[m
[32m+[m[32m      private int user_id;[m
[32m+[m
[32m+[m[32m      @Column(name = "hotel_id", nullable = false)  // Foreign key reference to Hotel.[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      @Column(name = "single_room")[m
[32m+[m[32m      private int single_room;[m
[32m+[m
[32m+[m[32m      @Column(name = "double_room")[m
[32m+[m[32m      private int double_room;[m
[32m+[m
[32m+[m[32m      @Column(name = "booking_date")[m
[32m+[m[32m      private LocalDate bookingDate;[m
[32m+[m
[32m+[m[32m      @Column(name = "check_in_date")[m
[32m+[m[32m      private LocalDate checkInDate;[m
[32m+[m
[32m+[m[32m      @Column(name = "check_out_date")[m
[32m+[m[32m      private LocalDate checkOutDate;[m
[32m+[m
[32m+[m[32m      @Column(name = "status")[m
[32m+[m[32m      private String status;[m
[32m+[m
[32m+[m[32m      @Column(name = "total_amount")[m
[32m+[m[32m      private int totalAmount;[m
[32m+[m
[32m+[m[32m      @Column(name = "payments")[m
[32m+[m[32m      private String payments;[m
[32m+[m
[32m+[m[32m      public Booking( int user_id, int hotel_id, int single_room,[m
[32m+[m[32m                     int double_room, LocalDate bookingDate, LocalDate checkInDate,[m
[32m+[m[32m                     LocalDate checkOutDate, String status, int totalAmount, String payments) {[m
[32m+[m[32m            this.user_id = user_id;[m
[32m+[m[32m            this.hotel_id = hotel_id;[m
[32m+[m[32m            this.single_room = single_room;[m
[32m+[m[32m            this.double_room = double_room;[m
[32m+[m[32m            this.bookingDate = bookingDate;[m
[32m+[m[32m            this.checkInDate = checkInDate;[m
[32m+[m[32m            this.checkOutDate = checkOutDate;[m
[32m+[m[32m            this.status = status;[m
[32m+[m[32m            this.totalAmount = totalAmount;[m
[32m+[m[32m            this.payments = payments;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/entity/Hotel.java b/BookingService/src/main/java/com/HavenHub/booking_service/entity/Hotel.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4c90b73[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/entity/Hotel.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.entity;[m
[32m+[m[32m//Data Transfer Object[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class Hotel {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private float ratings;[m
[32m+[m[32m      private String address;[m
[32m+[m[32m      private String features;[m
[32m+[m[32m      private String city;[m
[32m+[m[32m      private String hotel_photo;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String location;[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/entity/HotelUser.java b/BookingService/src/main/java/com/HavenHub/booking_service/entity/HotelUser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0150aae[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/entity/HotelUser.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelUser {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private String email;[m
[32m+[m[32m      private String password;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String type;[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/repository/BookingRepo.java b/BookingService/src/main/java/com/HavenHub/booking_service/repository/BookingRepo.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9fd8d86[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/repository/BookingRepo.java[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.repository;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.Booking;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.Query;[m
[32m+[m[32mimport org.springframework.data.repository.query.Param;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic interface BookingRepo extends JpaRepository<Booking,Integer> {[m
[32m+[m
[32m+[m[32m      @Query("SELECT b FROM Booking b WHERE b.user_id = :userId")[m
[32m+[m[32m      List<Booking> findByUserId(@Param("userId") int userId);[m
[32m+[m
[32m+[m[32m      @Query("SELECT b FROM Booking b WHERE b.booking_id = :id")[m
[32m+[m[32m      Booking findByBooking_id(@Param("id") int id);[m
[32m+[m
[32m+[m[32m      @Query("SELECT b FROM Booking b WHERE b.hotel_id = :hotel_id AND b.checkInDate = :date")[m
[32m+[m[32m      List<Booking> findByHotel_idAndCheckInDate(@Param("hotel_id") int hotel_id,[m
[32m+[m[32m                                                 @Param("date") LocalDate date);[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/service/BookingService.java b/BookingService/src/main/java/com/HavenHub/booking_service/service/BookingService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..54fac88[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/service/BookingService.java[m
[36m@@ -0,0 +1,42 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.DTO.BookingDTO;[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.Booking;[m
[32m+[m[32mimport com.HavenHub.booking_service.repository.BookingRepo;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class BookingService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      BookingRepo br;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      public String addBooking(BookingDTO booking) {[m
[32m+[m[32m            Booking book=new Booking(booking.getUser_id(),booking.getHotel_id()[m
[32m+[m[32m                    ,booking.getSingle_room(), booking.getDouble_room(),booking.getBookingDate(),[m
[32m+[m[32m                    booking.getCheckInDate(),booking.getCheckOutDate(),"booked",[m
[32m+[m[32m                    booking.getTotalAmount(),booking.getPayments());[m
[32m+[m[32m            br.save(book);[m
[32m+[m[32m            return "Successfully Booked";[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public List<Booking> bookedRoomsByUser(int userId) {[m
[32m+[m[32m            return br.findByUserId(userId);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String update(int bookingId) {[m
[32m+[m[32m            Booking b=br.findByBooking_id(bookingId);[m
[32m+[m[32m            b.setStatus("cancelled");[m
[32m+[m[32m            br.save(b);[m
[32m+[m[32m            return "Successfully Cancelled";[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public List<Booking> getAllRoomsHotel(int hotelId, LocalDate date) {[m
[32m+[m[32m            return br.findByHotel_idAndCheckInDate(hotelId,date);[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/service/JWTService.java b/BookingService/src/main/java/com/HavenHub/booking_service/service/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..31110c5[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/service/JWTService.java[m
[36m@@ -0,0 +1,71 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.service;[m
[32m+[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.JwtBuilder;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport java.security.NoSuchAlgorithmException;[m
[32m+[m[32mimport java.util.Base64;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m[32mimport javax.crypto.KeyGenerator;[m
[32m+[m[32mimport javax.crypto.SecretKey;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m[32m      private String secretKey = "N2VGejNuOV5US3F2V3pUNzFNc3BLO0hOXFFGMnJYOV9zZmNEOXR1eEdkUHpIekx6WU5ab0N6N2V4YTd4bWpmbHQA";[m
[32m+[m
[32m+[m
[32m+[m[32m      public JWTService() {[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String generateToken(String username) {[m
[32m+[m[32m            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m                    expiration(new Date(System.currentTimeMillis() + 108000000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private SecretKey getKey() {[m
[32m+[m[32m            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String extractUserName(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m            return claimResolver.apply(claims);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Claims extractAllClaims(String token) {[m
[32m+[m[32m            return Jwts.parser().[m
[32m+[m[32m                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m            String userName = this.extractUserName(token);[m
[32m+[m[32m            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private boolean isTokenExpired(String token) {[m
[32m+[m[32m            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Date extractExpiration(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/BookingService/src/main/java/com/HavenHub/booking_service/service/MyUserDetailsService.java b/BookingService/src/main/java/com/HavenHub/booking_service/service/MyUserDetailsService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7da7988[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/java/com/HavenHub/booking_service/service/MyUserDetailsService.java[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.booking_service.DTO.UserPrincipalDTO;[m
[32m+[m[32mimport com.HavenHub.booking_service.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.booking_service.entity.HotelUser;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class MyUserDetailsService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private UserInterface ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private HttpSession session;[m
[32m+[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {[m
[32m+[m[32m//            HotelUser user=ur.findByName(username);[m
[32m+[m[32m//[m
[32m+[m[32m//            if(user==null){[m
[32m+[m[32m//                  System.out.println("User Not Found");[m
[32m+[m[32m//                  throw new UsernameNotFoundException("user not found");[m
[32m+[m[32m//            }[m
[32m+[m[32m//            return new UserPrincipalDTO(user);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m//            // Check if identifier is an email or username[m
[32m+[m[32m//            HotelUser user =ur.findByEmail(identifier); // Assume findByEmail already exists[m
[32m+[m[32m//            if (user == null) {[m
[32m+[m[32m//                  user = ur.findByName(identifier); // Fallback to username lookup[m
[32m+[m[32m//            }[m
[32m+[m[32m//[m
[32m+[m[32m//            if (user == null) {[m
[32m+[m[32m//                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m//            }[m
[32m+[m[32m//[m
[32m+[m[32m//            return new org.springframework.security.core.userdetails.User([m
[32m+[m[32m//                    user.getName(), user.getPassword(), new ArrayList<>());[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m            HotelUser user;[m
[32m+[m
[32m+[m[32m            // Determine if identifier is an email or username[m
[32m+[m[32m            if (identifier.contains("@")) { // Assume email if '@' is present[m
[32m+[m[32m                  user = ur.getByEmail(identifier).getBody();[m
[32m+[m[32m            } else {[m
[32m+[m[32m                  user = ur.getByName(identifier).getBody();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user == null) {[m
[32m+[m[32m                  System.out.println("User Not Found");[m
[32m+[m[32m                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m            }[m
[32m+[m[32m           session.setAttribute("role",user.getType());[m
[32m+[m
[32m+[m[32m            return new UserPrincipalDTO(user); // Use UserPrincipalDTO to return user details[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/BookingService/src/main/resources/application.properties b/BookingService/src/main/resources/application.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..512f236[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/main/resources/application.properties[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m# Application Name[m
[32m+[m[32mspring.application.name=booking-service[m
[32m+[m
[32m+[m[32m# JPA and Hibernate[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mspring.jpa.show-sql=true[m
[32m+[m
[32m+[m
[32m+[m[32m#[m
[32m+[m[32m## OAuth2 Client Registration[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-id=708656180433-9pfcgi05gpjd4chbpnlbdatmq2pi2k6p.apps.googleusercontent.com[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-secret=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[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.scope=openid,profile,email[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8083/login/oauth2/code/google[m
[32m+[m
[32m+[m
[32m+[m[32m# Enable detailed security logs (for debugging)[m
[32m+[m[32mlogging.level.org.springframework.security=DEBUG[m
[32m+[m
[32m+[m[32mlogging.level.org.apache.maven=DEBUG[m
[32m+[m
[32m+[m
[32m+[m[32m# Database Configuration[m
[32m+[m[32mspring.datasource.url=jdbc:mysql://localhost:3306/booking_service[m
[32m+[m[32mspring.datasource.username=root[m
[32m+[m[32mspring.datasource.password=abishek@1[m
[32m+[m[32mspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
[1mdiff --git a/BookingService/src/test/java/com/HavenHub/booking_service/BookingServiceApplicationTests.java b/BookingService/src/test/java/com/HavenHub/booking_service/BookingServiceApplicationTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c0db646[m
[1m--- /dev/null[m
[1m+++ b/BookingService/src/test/java/com/HavenHub/booking_service/BookingServiceApplicationTests.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.booking_service;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32mclass BookingServiceApplicationTests {[m
[32m+[m
[32m+[m	[32m@Test[m
[32m+[m	[32mvoid contextLoads() {[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/.gitattributes b/HotelService/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..3b41682[m
[1m--- /dev/null[m
[1m+++ b/HotelService/.gitattributes[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m/mvnw text eol=lf[m
[32m+[m[32m*.cmd text eol=crlf[m
[1mdiff --git a/HotelService/.gitignore b/HotelService/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..549e00a[m
[1m--- /dev/null[m
[1m+++ b/HotelService/.gitignore[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mHELP.md[m
[32m+[m[32mtarget/[m
[32m+[m[32m!.mvn/wrapper/maven-wrapper.jar[m
[32m+[m[32m!**/src/main/**/target/[m
[32m+[m[32m!**/src/test/**/target/[m
[32m+[m
[32m+[m[32m### STS ###[m
[32m+[m[32m.apt_generated[m
[32m+[m[32m.classpath[m
[32m+[m[32m.factorypath[m
[32m+[m[32m.project[m
[32m+[m[32m.settings[m
[32m+[m[32m.springBeans[m
[32m+[m[32m.sts4-cache[m
[32m+[m
[32m+[m[32m### IntelliJ IDEA ###[m
[32m+[m[32m.idea[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m
[32m+[m[32m### NetBeans ###[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/.nb-gradle/[m
[32m+[m[32mbuild/[m
[32m+[m[32m!**/src/main/**/build/[m
[32m+[m[32m!**/src/test/**/build/[m
[32m+[m
[32m+[m[32m### VS Code ###[m
[32m+[m[32m.vscode/[m
[1mdiff --git a/HotelService/.mvn/wrapper/maven-wrapper.properties b/HotelService/.mvn/wrapper/maven-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..d58dfb7[m
[1m--- /dev/null[m
[1m+++ b/HotelService/.mvn/wrapper/maven-wrapper.properties[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#   http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32mwrapperVersion=3.3.2[m
[32m+[m[32mdistributionType=only-script[m
[32m+[m[32mdistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip[m
[1mdiff --git a/HotelService/mvnw b/HotelService/mvnw[m
[1mnew file mode 100644[m
[1mindex 0000000..19529dd[m
[1m--- /dev/null[m
[1m+++ b/HotelService/mvnw[m
[36m@@ -0,0 +1,259 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m#[m
[32m+[m[32m# Optional ENV vars[m
[32m+[m[32m# -----------------[m
[32m+[m[32m#   JAVA_HOME - location of a JDK home dir, required when download maven via java source[m
[32m+[m[32m#   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mset -euf[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != debug ] || set -x[m
[32m+[m
[32m+[m[32m# OS specific support.[m
[32m+[m[32mnative_path() { printf %s\\n "$1"; }[m
[32m+[m[32mcase "$(uname)" in[m
[32m+[m[32mCYGWIN* | MINGW*)[m
[32m+[m[32m  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"[m
[32m+[m[32m  native_path() { cygpath --path --windows "$1"; }[m
[32m+[m[32m  ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# set JAVACMD and JAVACCMD[m
[32m+[m[32mset_java_home() {[m
[32m+[m[32m  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched[m
[32m+[m[32m  if [ -n "${JAVA_HOME-}" ]; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ]; then[m
[32m+[m[32m      # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/jre/sh/javac"[m
[32m+[m[32m    else[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/bin/javac"[m
[32m+[m
[32m+[m[32m      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then[m
[32m+[m[32m        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2[m
[32m+[m[32m        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2[m
[32m+[m[32m        return 1[m
[32m+[m[32m      fi[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    JAVACMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v java[m
[32m+[m[32m    )" || :[m
[32m+[m[32m    JAVACCMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v javac[m
[32m+[m[32m    )" || :[m
[32m+[m
[32m+[m[32m    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then[m
[32m+[m[32m      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2[m
[32m+[m[32m      return 1[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# hash string like Java String::hashCode[m
[32m+[m[32mhash_string() {[m
[32m+[m[32m  str="${1:-}" h=0[m
[32m+[m[32m  while [ -n "$str" ]; do[m
[32m+[m[32m    char="${str%"${str#?}"}"[m
[32m+[m[32m    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))[m
[32m+[m[32m    str="${str#?}"[m
[32m+[m[32m  done[m
[32m+[m[32m  printf %x\\n $h[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mverbose() { :; }[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }[m
[32m+[m
[32m+[m[32mdie() {[m
[32m+[m[32m  printf %s\\n "$1" >&2[m
[32m+[m[32m  exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtrim() {[m
[32m+[m[32m  # MWRAPPER-139:[m
[32m+[m[32m  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.[m
[32m+[m[32m  #   Needed for removing poorly interpreted newline sequences when running in more[m
[32m+[m[32m  #   exotic environments such as mingw bash on Windows.[m
[32m+[m[32m  printf "%s" "${1}" | tr -d '[:space:]'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32mwhile IFS="=" read -r key value; do[m
[32m+[m[32m  case "${key-}" in[m
[32m+[m[32m  distributionUrl) distributionUrl=$(trim "${value-}") ;;[m
[32m+[m[32m  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m
[32m+[m[32mcase "${distributionUrl##*/}" in[m
[32m+[m[32mmaven-mvnd-*bin.*)[m
[32m+[m[32m  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/[m
[32m+[m[32m  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in[m
[32m+[m[32m  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;[m
[32m+[m[32m  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;[m
[32m+[m[32m  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;[m
[32m+[m[32m  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;[m
[32m+[m[32m  *)[m
[32m+[m[32m    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2[m
[32m+[m[32m    distributionPlatform=linux-amd64[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32m  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"[m
[32m+[m[32m  ;;[m
[32m+[m[32mmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;[m
[32m+[m[32m*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32m[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"[m
[32m+[m[32mdistributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlName%.*}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlNameMain%-bin}"[m
[32m+[m[32mMAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"[m
[32m+[m[32mMAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"[m
[32m+[m
[32m+[m[32mexec_maven() {[m
[32m+[m[32m  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :[m
[32m+[m[32m  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif [ -d "$MAVEN_HOME" ]; then[m
[32m+[m[32m  verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  exec_maven "$@"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mcase "${distributionUrl-}" in[m
[32m+[m[32m*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;[m
[32m+[m[32m*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32mif TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then[m
[32m+[m[32m  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }[m
[32m+[m[32m  trap clean HUP INT TERM EXIT[m
[32m+[m[32melse[m
[32m+[m[32m  die "cannot create temp dir"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mmkdir -p -- "${MAVEN_HOME%/*}"[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mverbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mverbose "Downloading from: $distributionUrl"[m
[32m+[m[32mverbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m# select .zip or .tar.gz[m
[32m+[m[32mif ! command -v unzip >/dev/null; then[m
[32m+[m[32m  distributionUrl="${distributionUrl%.zip}.tar.gz"[m
[32m+[m[32m  distributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# verbose opt[m
[32m+[m[32m__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v[m
[32m+[m
[32m+[m[32m# normalize http auth[m
[32m+[m[32mcase "${MVNW_PASSWORD:+has-password}" in[m
[32m+[m[32m'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mhas-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mif [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then[m
[32m+[m[32m  verbose "Found wget ... using wget"[m
[32m+[m[32m  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"[m
[32m+[m[32melif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then[m
[32m+[m[32m  verbose "Found curl ... using curl"[m
[32m+[m[32m  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"[m
[32m+[m[32melif set_java_home; then[m
[32m+[m[32m  verbose "Falling back to use Java to download"[m
[32m+[m[32m  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"[m
[32m+[m[32m  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m[32m  cat >"$javaSource" <<-END[m
[32m+[m	[32mpublic class Downloader extends java.net.Authenticator[m
[32m+[m	[32m{[m
[32m+[m	[32m  protected java.net.PasswordAuthentication getPasswordAuthentication()[m
[32m+[m	[32m  {[m
[32m+[m	[32m    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m  public static void main( String[] args ) throws Exception[m
[32m+[m	[32m  {[m
[32m+[m	[32m    setDefault( new Downloader() );[m
[32m+[m	[32m    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m}[m
[32m+[m	[32mEND[m
[32m+[m[32m  # For Cygwin/MinGW, switch paths to Windows format before running javac and java[m
[32m+[m[32m  verbose " - Compiling Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"[m
[32m+[m[32m  verbose " - Running Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32mif [ -n "${distributionSha256Sum-}" ]; then[m
[32m+[m[32m  distributionSha256Result=false[m
[32m+[m[32m  if [ "$MVN_CMD" = mvnd.sh ]; then[m
[32m+[m[32m    echo "Checksum validation is not supported for maven-mvnd." >&2[m
[32m+[m[32m    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  elif command -v sha256sum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  elif command -v shasum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2[m
[32m+[m[32m    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32m  if [ $distributionSha256Result = false ]; then[m
[32m+[m[32m    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2[m
[32m+[m[32m    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mif command -v unzip >/dev/null; then[m
[32m+[m[32m  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"[m
[32m+[m[32melse[m
[32m+[m[32m  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"[m
[32m+[m[32mfi[m
[32m+[m[32mprintf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"[m
[32m+[m[32mmv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"[m
[32m+[m
[32m+[m[32mclean || :[m
[32m+[m[32mexec_maven "$@"[m
[1mdiff --git a/HotelService/mvnw.cmd b/HotelService/mvnw.cmd[m
[1mnew file mode 100644[m
[1mindex 0000000..249bdf3[m
[1m--- /dev/null[m
[1m+++ b/HotelService/mvnw.cmd[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<# : batch portion[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m@REM or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m@REM distributed with this work for additional information[m
[32m+[m[32m@REM regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m@REM to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m@REM "License"); you may not use this file except in compliance[m
[32m+[m[32m@REM with the License.  You may obtain a copy of the License at[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m@REM software distributed under the License is distributed on an[m
[32m+[m[32m@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m@REM KIND, either express or implied.  See the License for the[m
[32m+[m[32m@REM specific language governing permissions and limitations[m
[32m+[m[32m@REM under the License.[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Optional ENV vars[m
[32m+[m[32m@REM   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)[m
[32m+[m[32m@SET __MVNW_CMD__=[m
[32m+[m[32m@SET __MVNW_ERROR__=[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%[m
[32m+[m[32m@SET PSModulePath=[m
[32m+[m[32m@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @([m
[32m+[m[32m  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)[m
[32m+[m[32m)[m
[32m+[m[32m@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=[m
[32m+[m[32m@SET __MVNW_ARG0_NAME__=[m
[32m+[m[32m@SET MVNW_USERNAME=[m
[32m+[m[32m@SET MVNW_PASSWORD=[m
[32m+[m[32m@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)[m
[32m+[m[32m@echo Cannot start maven from wrapper >&2 && exit /b 1[m
[32m+[m[32m@GOTO :EOF[m
[32m+[m[32m: end batch / begin powershell #>[m
[32m+[m
[32m+[m[32m$ErrorActionPreference = "Stop"[m
[32m+[m[32mif ($env:MVNW_VERBOSE -eq "true") {[m
[32m+[m[32m  $VerbosePreference = "Continue"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32m$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl[m
[32m+[m[32mif (!$distributionUrl) {[m
[32m+[m[32m  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {[m
[32m+[m[32m  "maven-mvnd-*" {[m
[32m+[m[32m    $USE_MVND = $true[m
[32m+[m[32m    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"[m
[32m+[m[32m    $MVN_CMD = "mvnd.cmd"[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m  default {[m
[32m+[m[32m    $USE_MVND = $false[m
[32m+[m[32m    $MVN_CMD = $script -replace '^mvnw','mvn'[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32mif ($env:MVNW_REPOURL) {[m
[32m+[m[32m  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }[m
[32m+[m[32m  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"[m
[32m+[m[32m}[m
[32m+[m[32m$distributionUrlName = $distributionUrl -replace '^.*/',''[m
[32m+[m[32m$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''[m
[32m+[m[32m$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32mif ($env:MAVEN_USER_HOME) {[m
[32m+[m[32m  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32m}[m
[32m+[m[32m$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''[m
[32m+[m[32m$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"[m
[32m+[m
[32m+[m[32mif (Test-Path -Path "$MAVEN_HOME" -PathType Container) {[m
[32m+[m[32m  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m  exit $?[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {[m
[32m+[m[32m  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile[m
[32m+[m[32m$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null[m
[32m+[m[32mtrap {[m
[32m+[m[32m  if ($TMP_DOWNLOAD_DIR.Exists) {[m
[32m+[m[32m    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mNew-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mWrite-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mWrite-Verbose "Downloading from: $distributionUrl"[m
[32m+[m[32mWrite-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m$webclient = New-Object System.Net.WebClient[m
[32m+[m[32mif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {[m
[32m+[m[32m  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)[m
[32m+[m[32m}[m
[32m+[m[32m[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12[m
[32m+[m[32m$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32m$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum[m
[32m+[m[32mif ($distributionSha256Sum) {[m
[32m+[m[32m  if ($USE_MVND) {[m
[32m+[m[32m    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."[m
[32m+[m[32m  }[m
[32m+[m[32m  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash[m
[32m+[m[32m  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {[m
[32m+[m[32m    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mExpand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null[m
[32m+[m[32mRename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null[m
[32m+[m[32mtry {[m
[32m+[m[32m  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null[m
[32m+[m[32m} catch {[m
[32m+[m[32m  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {[m
[32m+[m[32m    Write-Error "fail to move MAVEN_HOME"[m
[32m+[m[32m  }[m
[32m+[m[32m} finally {[m
[32m+[m[32m  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mWrite-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[1mdiff --git a/HotelService/pom.xml b/HotelService/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..923c75d[m
[1m--- /dev/null[m
[1m+++ b/HotelService/pom.xml[m
[36m@@ -0,0 +1,122 @@[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m		[32m xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.1.4</version>[m
[32m+[m		[32m<relativePath/>[m
[32m+[m	[32m</parent>[m
[32m+[m	[32m<groupId>sb</groupId>[m
[32m+[m	[32m<artifactId>HotelBooking</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m	[32m<name>HotelBooking</name>[m
[32m+[m	[32m<description>Demo project for Spring Boot</description>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>17</java.version>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>2022.0.4</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<!-- Spring Boot Starters -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-data-jpa</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-oauth2-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-openfeign</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- JWT Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Lombok -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<version>1.18.30</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- MySQL Driver -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.mysql</groupId>[m
[32m+[m			[32m<artifactId>mysql-connector-j</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- DevTools -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-devtools</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt</artifactId>[m
[32m+[m			[32m<version>0.12.6</version>  <!-- Ensure this is 0.11.0 or later -->[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- Test Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m[32m</project>[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/HotelDTO.java b/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/HotelDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5353507[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/HotelDTO.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.DTO;[m
[32m+[m[32m//Data Transfer Object[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelDTO {[m
[32m+[m
[32m+[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private float ratings;[m
[32m+[m[32m      private String address;[m
[32m+[m[32m      private String features;[m
[32m+[m[32m      private String city;[m
[32m+[m[32m      private String hotel_photo;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String location;[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/UserPrincipalDTO.java b/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/UserPrincipalDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8707aaa[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/DTO/UserPrincipalDTO.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.DTO;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class UserPrincipalDTO implements UserDetails {[m
[32m+[m
[32m+[m[32m      private HotelUser user;[m
[32m+[m
[32m+[m[32m      public UserPrincipalDTO(HotelUser user) {[m
[32m+[m[32m            this.user=user;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m            return Collections.singleton(new SimpleGrantedAuthority(user.getType()));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getPassword() {[m
[32m+[m[32m            return user.getPassword();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getUsername() {[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonLocked() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isCredentialsNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isEnabled() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/Feign/UserInterface.java b/HotelService/src/main/java/com/HavenHub/hotel_service/Feign/UserInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..724cdc0[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/Feign/UserInterface.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.GetMapping;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.PathVariable;[m
[32m+[m
[32m+[m[32m@FeignClient("USER-SERVICE")[m
[32m+[m
[32m+[m[32mpublic interface UserInterface {[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByEmail/{email}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByEmail(@PathVariable("email") String email);[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByName/{name}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByName(@PathVariable("name") String name);[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/HotelServiceApplication.java b/HotelService/src/main/java/com/HavenHub/hotel_service/HotelServiceApplication.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ff89c28[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/HotelServiceApplication.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service;[m
[32m+[m
[32m+[m[32mimport org.springframework.boot.SpringApplication;[m
[32m+[m[32mimport org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.EnableFeignClients;[m
[32m+[m
[32m+[m[32m@SpringBootApplication[m
[32m+[m[32m@EnableFeignClients[m
[32m+[m[32mpublic class HotelServiceApplication {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSpringApplication.run(HotelServiceApplication.class, args);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/JWTFilter.java b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/JWTFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8aad92b[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/JWTFilter.java[m
[36m@@ -0,0 +1,79 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.service.JWTService;[m
[32m+[m[32mimport com.HavenHub.hotel_service.service.MyUserDetailsService;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.context.ApplicationContext;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32mpublic class JWTFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      ApplicationContext context;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      MyUserDetailsService myUserDetailsService;[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)[m
[32m+[m[32m              throws ServletException, IOException {[m
[32m+[m
[32m+[m[32m            String authHeader = request.getHeader("Authorization");[m
[32m+[m[32m            String token = null;[m
[32m+[m[32m            String username = null;[m
[32m+[m
[32m+[m[32m            // Validate the Authorization header[m
[32m+[m[32m            if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m                  filterChain.doFilter(request, response);[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Extract the token[m
[32m+[m[32m            token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                  // Extract username from token[m
[32m+[m
[32m+[m[32m                  username = jwtService.extractUserName(token);[m
[32m+[m[32m                  logger.info("Extracted username: " + username);[m
[32m+[m[32m                  if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                        // Load user details[m
[32m+[m[32m                        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);[m
[32m+[m[32m                        logger.info("Loaded UserDetails: " + userDetails.getUsername());[m
[32m+[m[32m                        // Validate the token[m
[32m+[m[32m                        if (jwtService.validateTokens(token, userDetails)) {[m
[32m+[m[32m                              UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                                      new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m                              authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                              SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                              logger.warn("Invalid JWT token for user: " + username);[m
[32m+[m[32m                        }[m
[32m+[m[32m                  }[m
[32m+[m[32m            } catch (Exception ex) {[m
[32m+[m[32m                  logger.error("Error during JWT validation: ", ex);[m
[32m+[m[32m                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                  response.getWriter().write("Unauthorized");[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/SecurityConfig.java b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/SecurityConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..638784c[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/SecurityConfig.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.hotel_service.service.JWTService;[m
[32m+[m[32mimport com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.config.Customizer;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@EnableWebSecurity[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m            return http.csrf(AbstractHttpConfigurer::disable) // Disable CSRF[m
[32m+[m[32m                    .cors(Customizer.withDefaults()) // Enable CORS if required[m
[32m+[m[32m                    .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m                            .anyRequest().permitAll() // Allow all requests[m
[32m+[m[32m                    )[m
[32m+[m[32m                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Stateless session[m
[32m+[m[32m                    .build();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/WebConfig.java b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/WebConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bba5a35[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/configuration/WebConfig.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.configuration;[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mclass WebConfig implements WebMvcConfigurer {[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m            registry.addMapping("/api/v1/**") // Apply to all paths[m
[32m+[m[32m                    .allowedOrigins("http://localhost:3000") // Allow frontend origin[m
[32m+[m[32m                    .allowedMethods("GET", "POST", "PUT", "DELETE","PATCH") // Allowed HTTP methods[m
[32m+[m[32m                    .allowedHeaders("*"); // Allow all headers[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/controller/HotelController.java b/HotelService/src/main/java/com/HavenHub/hotel_service/controller/HotelController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2110a8e[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/controller/HotelController.java[m
[36m@@ -0,0 +1,96 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.DTO.HotelDTO;[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.Hotel;[m
[32m+[m[32mimport com.HavenHub.hotel_service.service.HotelService;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/hotel")[m
[32m+[m[32mpublic class HotelController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelService hs;[m
[32m+[m
[32m+[m
[32m+[m[32m            @PostMapping("/save")[m
[32m+[m[32m            public ResponseEntity<String> addHotel([m
[32m+[m[32m                    @RequestParam("name") String name,[m
[32m+[m[32m                    @RequestParam("ratings") float ratings,[m
[32m+[m[32m                    @RequestParam("address") String address,[m
[32m+[m[32m                    @RequestParam("features") String features,[m
[32m+[m[32m                    @RequestParam("city") String city,[m
[32m+[m[32m                    @RequestParam("mobile") String mobile,[m
[32m+[m[32m                    @RequestParam("location") String location,[m
[32m+[m[32m                    @RequestParam("photo") MultipartFile photo,[m
[32m+[m[32m                    @RequestParam("price") int price) {[m
[32m+[m
[32m+[m[32m                  // Save the photo to the images folder[m
[32m+[m[32m                  String uploadDir = "src/main/resources/images/hotel";[m
[32m+[m[32m                  File uploadFolder = new File(uploadDir);[m
[32m+[m[32m                  if (!uploadFolder.exists()) {[m
[32m+[m[32m                        uploadFolder.mkdirs(); // Create directory if it doesn't exist[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m                  File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m                  try {[m
[32m+[m[32m                        photo.transferTo(photoFile); // Save the file[m
[32m+[m[32m                  } catch (IOException e) {[m
[32m+[m[32m                        return new ResponseEntity<>("Failed to upload photo", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  // Save hotel details to the database[m
[32m+[m[32m                  String photoPath = "/images/hotel" + photoFileName; // Relative path to store in the database[m
[32m+[m[32m                  HotelDTO hotel = new HotelDTO(name, ratings, address, features, city, photoPath, mobile, location,price);[m
[32m+[m[32m                  hs.addHotel(hotel);[m
[32m+[m
[32m+[m[32m                  return new ResponseEntity<>("Hotel added successfully!", HttpStatus.OK);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path="/getAllHotels")[m
[32m+[m[32m      public ResponseEntity<List<Hotel>> getAllHotels(){[m
[32m+[m[32m            List<Hotel> list=hs.getHotels();[m
[32m+[m[32m            if(list.isEmpty())[m
[32m+[m[32m                  return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);[m
[32m+[m[32m           return new ResponseEntity<>(list,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "/getOne/{id}")[m
[32m+[m[32m      public ResponseEntity<Hotel> getHotel(@PathVariable("id") int id){[m
[32m+[m[32m            Hotel h= hs.getOnId(id);[m
[32m+[m[32m            if(h==null)[m
[32m+[m[32m                  return new ResponseEntity<>(null,HttpStatus.NOT_FOUND);[m
[32m+[m[32m            return  new ResponseEntity<>(h,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("getOneHotel/{city}")[m
[32m+[m[32m      public ResponseEntity<List<Hotel>> getHotelByCity(@PathVariable("city")String city){[m
[32m+[m[32m            List<Hotel> list = hs.getOnCity(city);[m
[32m+[m[32m            if(list.isEmpty())[m
[32m+[m[32m                  return new ResponseEntity<>(list,HttpStatus.NOT_FOUND);[m
[32m+[m[32m            return  new ResponseEntity<>(list,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @DeleteMapping("deleteHotel/{id}")[m
[32m+[m[32m      public ResponseEntity<String>  deleteHotel(@PathVariable("id") int id){[m
[32m+[m[32m            return new ResponseEntity<>(hs.delete(id),HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/entity/Hotel.java b/HotelService/src/main/java/com/HavenHub/hotel_service/entity/Hotel.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ba4589a[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/entity/Hotel.java[m
[36m@@ -0,0 +1,60 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "hotel")[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class Hotel {[m
[32m+[m
[32m+[m[32m      @Id[m
[32m+[m[32m      @GeneratedValue(strategy = GenerationType.AUTO)[m
[32m+[m[32m      @Column(name = "hotel_id")[m
[32m+[m[32m      private int id;[m
[32m+[m
[32m+[m[32m      @Column(name = "name")[m
[32m+[m[32m      private String name;[m
[32m+[m
[32m+[m[32m      @Column(name = "ratings")[m
[32m+[m[32m      private float ratings;[m
[32m+[m
[32m+[m[32m      @Column(name = "address")[m
[32m+[m[32m      private String address;[m
[32m+[m
[32m+[m[32m      @Column(name = "features")[m
[32m+[m[32m      private String features;[m
[32m+[m
[32m+[m[32m      @Column(name = "city")[m
[32m+[m[32m      private String city;[m
[32m+[m
[32m+[m[32m      @Column(name = "hotel_photo")[m
[32m+[m[32m      private String hotel_photo;[m
[32m+[m
[32m+[m[32m      @Column(name = "mobile")[m
[32m+[m[32m      private String mobile;[m
[32m+[m
[32m+[m[32m      @Column(name = "location")[m
[32m+[m[32m      private String location;[m
[32m+[m
[32m+[m[32m      @Column(name = "price")[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m      // No reference to Booking or Rooms entities[m
[32m+[m
[32m+[m
[32m+[m[32m      public Hotel(String name, float ratings, String address, String features, String city,[m
[32m+[m[32m                   String hotel_photo, String mobile, String location, int price) {[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m            this.ratings = ratings;[m
[32m+[m[32m            this.address = address;[m
[32m+[m[32m            this.features = features;[m
[32m+[m[32m            this.city = city;[m
[32m+[m[32m            this.hotel_photo = hotel_photo;[m
[32m+[m[32m            this.mobile = mobile;[m
[32m+[m[32m            this.location = location;[m
[32m+[m[32m            this.price = price;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/entity/HotelUser.java b/HotelService/src/main/java/com/HavenHub/hotel_service/entity/HotelUser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7e29606[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/entity/HotelUser.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelUser {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private String email;[m
[32m+[m[32m      private String password;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String type;[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/repository/HotelRepo.java b/HotelService/src/main/java/com/HavenHub/hotel_service/repository/HotelRepo.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9aa613d[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/repository/HotelRepo.java[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.repository;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.Hotel;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.stereotype.Repository;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Repository[m
[32m+[m[32mpublic interface HotelRepo extends JpaRepository<Hotel,Integer> {[m
[32m+[m[32m      List<Hotel> findAll();[m
[32m+[m
[32m+[m[32m      Hotel findById(int id);[m
[32m+[m
[32m+[m[32m      List<Hotel> findByCity(String city);[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/service/HotelService.java b/HotelService/src/main/java/com/HavenHub/hotel_service/service/HotelService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..149df07[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/service/HotelService.java[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.DTO.HotelDTO;[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.Hotel;[m
[32m+[m[32mimport com.HavenHub.hotel_service.repository.HotelRepo;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class HotelService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelRepo hr;[m
[32m+[m
[32m+[m
[32m+[m[32m      public String addHotel(HotelDTO hotel) {[m
[32m+[m[32m            Hotel h=new Hotel(hotel.getName(), hotel.getRatings(),hotel.getAddress(),[m
[32m+[m[32m                    hotel.getFeatures(), hotel.getCity(),[m
[32m+[m[32m                    hotel.getHotel_photo(),hotel.getMobile(),hotel.getLocation(),hotel.getPrice());[m
[32m+[m[32m            hr.save(h);[m
[32m+[m[32m            return h.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public List<Hotel> getHotels() {[m
[32m+[m[32m            return hr.findAll();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public Hotel getOnId(int id) {[m
[32m+[m[32m            return hr.findById(id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public List<Hotel> getOnCity(String city) {[m
[32m+[m[32m            return hr.findByCity(city);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String  delete(int id) {[m
[32m+[m[32m            hr.deleteById(id);[m
[32m+[m[32m            return "success";[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/service/JWTService.java b/HotelService/src/main/java/com/HavenHub/hotel_service/service/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..91de9dd[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/service/JWTService.java[m
[36m@@ -0,0 +1,72 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.service;[m
[32m+[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.JwtBuilder;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport java.security.NoSuchAlgorithmException;[m
[32m+[m[32mimport java.util.Base64;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m[32mimport javax.crypto.KeyGenerator;[m
[32m+[m[32mimport javax.crypto.SecretKey;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m[32m      private String secretKey = "N2VGejNuOV5US3F2V3pUNzFNc3BLO0hOXFFGMnJYOV9zZmNEOXR1eEdkUHpIekx6WU5ab0N6N2V4YTd4bWpmbHQA";[m
[32m+[m
[32m+[m
[32m+[m[32m      public JWTService() {[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String generateToken(String username) {[m
[32m+[m[32m            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m                    expiration(new Date(System.currentTimeMillis() + 108000000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private SecretKey getKey() {[m
[32m+[m[32m            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String extractUserName(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m            return claimResolver.apply(claims);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Claims extractAllClaims(String token) {[m
[32m+[m[32m            return Jwts.parser().[m
[32m+[m[32m                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m            String userName = this.extractUserName(token);[m
[32m+[m[32m            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private boolean isTokenExpired(String token) {[m
[32m+[m[32m            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Date extractExpiration(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/HotelService/src/main/java/com/HavenHub/hotel_service/service/MyUserDetailsService.java b/HotelService/src/main/java/com/HavenHub/hotel_service/service/MyUserDetailsService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9a8c158[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/java/com/HavenHub/hotel_service/service/MyUserDetailsService.java[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.hotel_service.DTO.UserPrincipalDTO;[m
[32m+[m[32mimport com.HavenHub.hotel_service.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.hotel_service.entity.HotelUser;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.apache.commons.logging.Log;[m
[32m+[m[32mimport org.apache.commons.logging.LogFactory;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class MyUserDetailsService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private UserInterface ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private HttpSession session;[m
[32m+[m
[32m+[m[32m      protected final Log logger = LogFactory.getLog(getClass());[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m            HotelUser user;[m
[32m+[m
[32m+[m[32m            // Determine if identifier is an email or username[m
[32m+[m[32m            if (identifier.contains("@")) { // Assume email if '@' is present[m
[32m+[m[32m                  logger.info("Email method called");[m
[32m+[m[32m                  user = ur.getByEmail(identifier).getBody();[m
[32m+[m[32m            } else {[m
[32m+[m[32m                  logger.info("Name method called");[m
[32m+[m[32m                  user = ur.getByName(identifier).getBody();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user == null) {[m
[32m+[m[32m                  logger.error("User Not found");[m
[32m+[m[32m                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m            }[m
[32m+[m[32m           session.setAttribute("role",user.getType());[m
[32m+[m
[32m+[m[32m            return new UserPrincipalDTO(user); // Use UserPrincipalDTO to return user details[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/HotelService/src/main/resources/application.properties b/HotelService/src/main/resources/application.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..f50fb58[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/main/resources/application.properties[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32m# Application Name[m
[32m+[m[32mspring.application.name=hotel-service[m
[32m+[m
[32m+[m[32m# JPA and Hibernate[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mspring.jpa.show-sql=true[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## OAuth2 Client Registration[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-id=708656180433-9pfcgi05gpjd4chbpnlbdatmq2pi2k6p.apps.googleusercontent.com[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-secret=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[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.scope=openid,profile,email[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8087/login/oauth2/code/google[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# Enable detailed security logs (for debugging)[m
[32m+[m[32mlogging.level.org.springframework.security=DEBUG[m
[32m+[m
[32m+[m[32mlogging.level.org.apache.maven=DEBUG[m
[32m+[m
[32m+[m
[32m+[m[32m# Database Configuration[m
[32m+[m[32mspring.datasource.url=jdbc:mysql://localhost:3306/hotel_service[m
[32m+[m[32mspring.datasource.username=root[m
[32m+[m[32mspring.datasource.password=abishek@1[m
[32m+[m[32mspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
[1mdiff --git a/HotelService/src/test/java/com/HavenHub/hotel_service/HotelServiceApplicationTests.java b/HotelService/src/test/java/com/HavenHub/hotel_service/HotelServiceApplicationTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..eef5fb1[m
[1m--- /dev/null[m
[1m+++ b/HotelService/src/test/java/com/HavenHub/hotel_service/HotelServiceApplicationTests.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.hotel_service;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32mclass HotelServiceApplicationTests {[m
[32m+[m
[32m+[m	[32m@Test[m
[32m+[m	[32mvoid contextLoads() {[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/.gitattributes b/RoomsService/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..3b41682[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/.gitattributes[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m/mvnw text eol=lf[m
[32m+[m[32m*.cmd text eol=crlf[m
[1mdiff --git a/RoomsService/.gitignore b/RoomsService/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..549e00a[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/.gitignore[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mHELP.md[m
[32m+[m[32mtarget/[m
[32m+[m[32m!.mvn/wrapper/maven-wrapper.jar[m
[32m+[m[32m!**/src/main/**/target/[m
[32m+[m[32m!**/src/test/**/target/[m
[32m+[m
[32m+[m[32m### STS ###[m
[32m+[m[32m.apt_generated[m
[32m+[m[32m.classpath[m
[32m+[m[32m.factorypath[m
[32m+[m[32m.project[m
[32m+[m[32m.settings[m
[32m+[m[32m.springBeans[m
[32m+[m[32m.sts4-cache[m
[32m+[m
[32m+[m[32m### IntelliJ IDEA ###[m
[32m+[m[32m.idea[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m
[32m+[m[32m### NetBeans ###[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/.nb-gradle/[m
[32m+[m[32mbuild/[m
[32m+[m[32m!**/src/main/**/build/[m
[32m+[m[32m!**/src/test/**/build/[m
[32m+[m
[32m+[m[32m### VS Code ###[m
[32m+[m[32m.vscode/[m
[1mdiff --git a/RoomsService/.mvn/wrapper/maven-wrapper.properties b/RoomsService/.mvn/wrapper/maven-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..d58dfb7[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/.mvn/wrapper/maven-wrapper.properties[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#   http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32mwrapperVersion=3.3.2[m
[32m+[m[32mdistributionType=only-script[m
[32m+[m[32mdistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip[m
[1mdiff --git a/RoomsService/mvnw b/RoomsService/mvnw[m
[1mnew file mode 100644[m
[1mindex 0000000..19529dd[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/mvnw[m
[36m@@ -0,0 +1,259 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m#[m
[32m+[m[32m# Optional ENV vars[m
[32m+[m[32m# -----------------[m
[32m+[m[32m#   JAVA_HOME - location of a JDK home dir, required when download maven via java source[m
[32m+[m[32m#   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mset -euf[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != debug ] || set -x[m
[32m+[m
[32m+[m[32m# OS specific support.[m
[32m+[m[32mnative_path() { printf %s\\n "$1"; }[m
[32m+[m[32mcase "$(uname)" in[m
[32m+[m[32mCYGWIN* | MINGW*)[m
[32m+[m[32m  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"[m
[32m+[m[32m  native_path() { cygpath --path --windows "$1"; }[m
[32m+[m[32m  ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# set JAVACMD and JAVACCMD[m
[32m+[m[32mset_java_home() {[m
[32m+[m[32m  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched[m
[32m+[m[32m  if [ -n "${JAVA_HOME-}" ]; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ]; then[m
[32m+[m[32m      # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/jre/sh/javac"[m
[32m+[m[32m    else[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/bin/javac"[m
[32m+[m
[32m+[m[32m      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then[m
[32m+[m[32m        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2[m
[32m+[m[32m        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2[m
[32m+[m[32m        return 1[m
[32m+[m[32m      fi[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    JAVACMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v java[m
[32m+[m[32m    )" || :[m
[32m+[m[32m    JAVACCMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v javac[m
[32m+[m[32m    )" || :[m
[32m+[m
[32m+[m[32m    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then[m
[32m+[m[32m      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2[m
[32m+[m[32m      return 1[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# hash string like Java String::hashCode[m
[32m+[m[32mhash_string() {[m
[32m+[m[32m  str="${1:-}" h=0[m
[32m+[m[32m  while [ -n "$str" ]; do[m
[32m+[m[32m    char="${str%"${str#?}"}"[m
[32m+[m[32m    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))[m
[32m+[m[32m    str="${str#?}"[m
[32m+[m[32m  done[m
[32m+[m[32m  printf %x\\n $h[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mverbose() { :; }[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }[m
[32m+[m
[32m+[m[32mdie() {[m
[32m+[m[32m  printf %s\\n "$1" >&2[m
[32m+[m[32m  exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtrim() {[m
[32m+[m[32m  # MWRAPPER-139:[m
[32m+[m[32m  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.[m
[32m+[m[32m  #   Needed for removing poorly interpreted newline sequences when running in more[m
[32m+[m[32m  #   exotic environments such as mingw bash on Windows.[m
[32m+[m[32m  printf "%s" "${1}" | tr -d '[:space:]'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32mwhile IFS="=" read -r key value; do[m
[32m+[m[32m  case "${key-}" in[m
[32m+[m[32m  distributionUrl) distributionUrl=$(trim "${value-}") ;;[m
[32m+[m[32m  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m
[32m+[m[32mcase "${distributionUrl##*/}" in[m
[32m+[m[32mmaven-mvnd-*bin.*)[m
[32m+[m[32m  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/[m
[32m+[m[32m  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in[m
[32m+[m[32m  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;[m
[32m+[m[32m  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;[m
[32m+[m[32m  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;[m
[32m+[m[32m  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;[m
[32m+[m[32m  *)[m
[32m+[m[32m    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2[m
[32m+[m[32m    distributionPlatform=linux-amd64[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32m  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"[m
[32m+[m[32m  ;;[m
[32m+[m[32mmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;[m
[32m+[m[32m*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32m[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"[m
[32m+[m[32mdistributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlName%.*}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlNameMain%-bin}"[m
[32m+[m[32mMAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"[m
[32m+[m[32mMAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"[m
[32m+[m
[32m+[m[32mexec_maven() {[m
[32m+[m[32m  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :[m
[32m+[m[32m  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif [ -d "$MAVEN_HOME" ]; then[m
[32m+[m[32m  verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  exec_maven "$@"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mcase "${distributionUrl-}" in[m
[32m+[m[32m*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;[m
[32m+[m[32m*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32mif TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then[m
[32m+[m[32m  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }[m
[32m+[m[32m  trap clean HUP INT TERM EXIT[m
[32m+[m[32melse[m
[32m+[m[32m  die "cannot create temp dir"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mmkdir -p -- "${MAVEN_HOME%/*}"[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mverbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mverbose "Downloading from: $distributionUrl"[m
[32m+[m[32mverbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m# select .zip or .tar.gz[m
[32m+[m[32mif ! command -v unzip >/dev/null; then[m
[32m+[m[32m  distributionUrl="${distributionUrl%.zip}.tar.gz"[m
[32m+[m[32m  distributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# verbose opt[m
[32m+[m[32m__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v[m
[32m+[m
[32m+[m[32m# normalize http auth[m
[32m+[m[32mcase "${MVNW_PASSWORD:+has-password}" in[m
[32m+[m[32m'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mhas-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mif [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then[m
[32m+[m[32m  verbose "Found wget ... using wget"[m
[32m+[m[32m  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"[m
[32m+[m[32melif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then[m
[32m+[m[32m  verbose "Found curl ... using curl"[m
[32m+[m[32m  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"[m
[32m+[m[32melif set_java_home; then[m
[32m+[m[32m  verbose "Falling back to use Java to download"[m
[32m+[m[32m  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"[m
[32m+[m[32m  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m[32m  cat >"$javaSource" <<-END[m
[32m+[m	[32mpublic class Downloader extends java.net.Authenticator[m
[32m+[m	[32m{[m
[32m+[m	[32m  protected java.net.PasswordAuthentication getPasswordAuthentication()[m
[32m+[m	[32m  {[m
[32m+[m	[32m    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m  public static void main( String[] args ) throws Exception[m
[32m+[m	[32m  {[m
[32m+[m	[32m    setDefault( new Downloader() );[m
[32m+[m	[32m    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m}[m
[32m+[m	[32mEND[m
[32m+[m[32m  # For Cygwin/MinGW, switch paths to Windows format before running javac and java[m
[32m+[m[32m  verbose " - Compiling Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"[m
[32m+[m[32m  verbose " - Running Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32mif [ -n "${distributionSha256Sum-}" ]; then[m
[32m+[m[32m  distributionSha256Result=false[m
[32m+[m[32m  if [ "$MVN_CMD" = mvnd.sh ]; then[m
[32m+[m[32m    echo "Checksum validation is not supported for maven-mvnd." >&2[m
[32m+[m[32m    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  elif command -v sha256sum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  elif command -v shasum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2[m
[32m+[m[32m    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32m  if [ $distributionSha256Result = false ]; then[m
[32m+[m[32m    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2[m
[32m+[m[32m    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mif command -v unzip >/dev/null; then[m
[32m+[m[32m  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"[m
[32m+[m[32melse[m
[32m+[m[32m  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"[m
[32m+[m[32mfi[m
[32m+[m[32mprintf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"[m
[32m+[m[32mmv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"[m
[32m+[m
[32m+[m[32mclean || :[m
[32m+[m[32mexec_maven "$@"[m
[1mdiff --git a/RoomsService/mvnw.cmd b/RoomsService/mvnw.cmd[m
[1mnew file mode 100644[m
[1mindex 0000000..249bdf3[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/mvnw.cmd[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<# : batch portion[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m@REM or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m@REM distributed with this work for additional information[m
[32m+[m[32m@REM regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m@REM to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m@REM "License"); you may not use this file except in compliance[m
[32m+[m[32m@REM with the License.  You may obtain a copy of the License at[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m@REM software distributed under the License is distributed on an[m
[32m+[m[32m@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m@REM KIND, either express or implied.  See the License for the[m
[32m+[m[32m@REM specific language governing permissions and limitations[m
[32m+[m[32m@REM under the License.[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Optional ENV vars[m
[32m+[m[32m@REM   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)[m
[32m+[m[32m@SET __MVNW_CMD__=[m
[32m+[m[32m@SET __MVNW_ERROR__=[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%[m
[32m+[m[32m@SET PSModulePath=[m
[32m+[m[32m@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @([m
[32m+[m[32m  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)[m
[32m+[m[32m)[m
[32m+[m[32m@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=[m
[32m+[m[32m@SET __MVNW_ARG0_NAME__=[m
[32m+[m[32m@SET MVNW_USERNAME=[m
[32m+[m[32m@SET MVNW_PASSWORD=[m
[32m+[m[32m@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)[m
[32m+[m[32m@echo Cannot start maven from wrapper >&2 && exit /b 1[m
[32m+[m[32m@GOTO :EOF[m
[32m+[m[32m: end batch / begin powershell #>[m
[32m+[m
[32m+[m[32m$ErrorActionPreference = "Stop"[m
[32m+[m[32mif ($env:MVNW_VERBOSE -eq "true") {[m
[32m+[m[32m  $VerbosePreference = "Continue"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32m$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl[m
[32m+[m[32mif (!$distributionUrl) {[m
[32m+[m[32m  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {[m
[32m+[m[32m  "maven-mvnd-*" {[m
[32m+[m[32m    $USE_MVND = $true[m
[32m+[m[32m    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"[m
[32m+[m[32m    $MVN_CMD = "mvnd.cmd"[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m  default {[m
[32m+[m[32m    $USE_MVND = $false[m
[32m+[m[32m    $MVN_CMD = $script -replace '^mvnw','mvn'[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32mif ($env:MVNW_REPOURL) {[m
[32m+[m[32m  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }[m
[32m+[m[32m  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"[m
[32m+[m[32m}[m
[32m+[m[32m$distributionUrlName = $distributionUrl -replace '^.*/',''[m
[32m+[m[32m$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''[m
[32m+[m[32m$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32mif ($env:MAVEN_USER_HOME) {[m
[32m+[m[32m  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32m}[m
[32m+[m[32m$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''[m
[32m+[m[32m$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"[m
[32m+[m
[32m+[m[32mif (Test-Path -Path "$MAVEN_HOME" -PathType Container) {[m
[32m+[m[32m  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m  exit $?[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {[m
[32m+[m[32m  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile[m
[32m+[m[32m$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null[m
[32m+[m[32mtrap {[m
[32m+[m[32m  if ($TMP_DOWNLOAD_DIR.Exists) {[m
[32m+[m[32m    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mNew-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mWrite-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mWrite-Verbose "Downloading from: $distributionUrl"[m
[32m+[m[32mWrite-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m$webclient = New-Object System.Net.WebClient[m
[32m+[m[32mif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {[m
[32m+[m[32m  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)[m
[32m+[m[32m}[m
[32m+[m[32m[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12[m
[32m+[m[32m$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32m$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum[m
[32m+[m[32mif ($distributionSha256Sum) {[m
[32m+[m[32m  if ($USE_MVND) {[m
[32m+[m[32m    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."[m
[32m+[m[32m  }[m
[32m+[m[32m  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash[m
[32m+[m[32m  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {[m
[32m+[m[32m    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mExpand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null[m
[32m+[m[32mRename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null[m
[32m+[m[32mtry {[m
[32m+[m[32m  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null[m
[32m+[m[32m} catch {[m
[32m+[m[32m  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {[m
[32m+[m[32m    Write-Error "fail to move MAVEN_HOME"[m
[32m+[m[32m  }[m
[32m+[m[32m} finally {[m
[32m+[m[32m  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mWrite-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[1mdiff --git a/RoomsService/pom.xml b/RoomsService/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..3ea381d[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/pom.xml[m
[36m@@ -0,0 +1,115 @@[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m		[32m xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.1.4</version>[m
[32m+[m		[32m<relativePath/>[m
[32m+[m	[32m</parent>[m
[32m+[m	[32m<groupId>sb</groupId>[m
[32m+[m	[32m<artifactId>HotelBooking</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m	[32m<name>HotelBooking</name>[m
[32m+[m	[32m<description>Demo project for Spring Boot</description>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>17</java.version>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>2022.0.4</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<!-- Spring Boot Starters -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-data-jpa</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-oauth2-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-openfeign</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- JWT Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Lombok -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<version>1.18.30</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- MySQL Driver -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.mysql</groupId>[m
[32m+[m			[32m<artifactId>mysql-connector-j</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- DevTools -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-devtools</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Test Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m[32m</project>[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/RoomsDTO.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/RoomsDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..18283d5[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/RoomsDTO.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.DTO;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class RoomsDTO {[m
[32m+[m
[32m+[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      private int room_number;[m
[32m+[m
[32m+[m[32m      private String roomType;[m
[32m+[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m      private String isAvailable;[m
[32m+[m
[32m+[m[32m      private String room_photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/UserPrincipalDTO.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/UserPrincipalDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..98f333e[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/DTO/UserPrincipalDTO.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.DTO;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class UserPrincipalDTO implements UserDetails {[m
[32m+[m
[32m+[m[32m      private HotelUser user;[m
[32m+[m
[32m+[m[32m      public UserPrincipalDTO(HotelUser user) {[m
[32m+[m[32m            this.user=user;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m            return Collections.singleton(new SimpleGrantedAuthority(user.getType()));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getPassword() {[m
[32m+[m[32m            return user.getPassword();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getUsername() {[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonLocked() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isCredentialsNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isEnabled() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/Feign/UserInterface.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/Feign/UserInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ff1ec03[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/Feign/UserInterface.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.GetMapping;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.PathVariable;[m
[32m+[m
[32m+[m[32m@FeignClient("USER-SERVICE")[m
[32m+[m
[32m+[m[32mpublic interface UserInterface {[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByEmail/{email}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByEmail(@PathVariable("email") String email);[m
[32m+[m
[32m+[m[32m      @GetMapping("api/v1/user/getByName/{name}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByName(@PathVariable("name") String name);[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/RoomsServiceApplication.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/RoomsServiceApplication.java[m
[1mnew file mode 100644[m
[1mindex 0000000..84b4d6f[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/RoomsServiceApplication.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service;[m
[32m+[m
[32m+[m[32mimport org.springframework.boot.SpringApplication;[m
[32m+[m[32mimport org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.EnableFeignClients;[m
[32m+[m
[32m+[m[32m@SpringBootApplication[m
[32m+[m[32m@EnableFeignClients[m
[32m+[m[32mpublic class RoomsServiceApplication {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSpringApplication.run(RoomsServiceApplication.class, args);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/JWTFilter.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/JWTFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0645092[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/JWTFilter.java[m
[36m@@ -0,0 +1,103 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.service.JWTService;[m
[32m+[m[32mimport com.HavenHub.rooms_service.service.MyUserDetailsService;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.ApplicationContext;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32mpublic class JWTFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      ApplicationContext context;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      MyUserDetailsService myUserDetailsService;[m
[32m+[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {[m
[32m+[m[32m//[m
[32m+[m[32m//            String authHeader=request.getHeader("Authorization");[m
[32m+[m[32m//            String token=null;[m
[32m+[m[32m//            String username=null;[m
[32m+[m[32m//[m
[32m+[m[32m//            if(authHeader!=null&&authHeader.startsWith("Bearer ")){[m
[32m+[m[32m//                  token=authHeader.substring(7);[m
[32m+[m[32m//                  username=jwtService.extractUserName(token);[m
[32m+[m[32m//            }[m
[32m+[m[32m//            if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null){[m
[32m+[m[32m//                  UserDetails userDetails=context.getBean(MyUserDetailsService.class).[m
[32m+[m[32m//                          loadUserByUsername(username);[m
[32m+[m[32m//                  if(jwtService.validateTokens(token,userDetails)){[m
[32m+[m[32m//                        UsernamePasswordAuthenticationToken authenticationToken=[m
[32m+[m[32m//                                new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());[m
[32m+[m[32m//                        authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m//                        SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m//                  }[m
[32m+[m[32m//            }[m
[32m+[m[32m//            filterChain.doFilter(request,response);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)[m
[32m+[m[32m              throws ServletException, IOException {[m
[32m+[m
[32m+[m[32m            String authHeader = request.getHeader("Authorization");[m
[32m+[m[32m            String token = null;[m
[32m+[m[32m            String username = null;[m
[32m+[m
[32m+[m[32m            // Validate the Authorization header[m
[32m+[m[32m            if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m                  filterChain.doFilter(request, response);[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Extract the token[m
[32m+[m[32m            token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                  // Extract username from token[m
[32m+[m[32m                  username = jwtService.extractUserName(token);[m
[32m+[m
[32m+[m[32m                  if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                        // Load user details[m
[32m+[m[32m                        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);[m
[32m+[m
[32m+[m[32m                        // Validate the token[m
[32m+[m[32m                        if (jwtService.validateTokens(token, userDetails)) {[m
[32m+[m[32m                              UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                                      new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m                              authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                              SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                              logger.warn("Invalid JWT token for user: " + username);[m
[32m+[m[32m                        }[m
[32m+[m[32m                  }[m
[32m+[m[32m            } catch (Exception ex) {[m
[32m+[m[32m                  logger.error("Error during JWT validation: ", ex);[m
[32m+[m[32m                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                  response.getWriter().write("Unauthorized");[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/SecurityConfig.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/SecurityConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8fb751c[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/SecurityConfig.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.rooms_service.service.JWTService;[m
[32m+[m[32mimport com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.config.Customizer;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m            return http.csrf(AbstractHttpConfigurer::disable) // Disable CSRF[m
[32m+[m[32m                    .cors(Customizer.withDefaults()) // Enable CORS if required[m
[32m+[m[32m                    .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m                            .anyRequest().permitAll() // Allow all requests[m
[32m+[m[32m                    )[m
[32m+[m[32m                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Stateless session[m
[32m+[m[32m                    .build();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/WebConfig.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/WebConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2b44efe[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/configuration/WebConfig.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.configuration;[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mclass WebConfig implements WebMvcConfigurer {[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m            registry.addMapping("/api/v1/**") // Apply to all paths[m
[32m+[m[32m                    .allowedOrigins("http://localhost:3000") // Allow frontend origin[m
[32m+[m[32m                    .allowedMethods("GET", "POST", "PUT", "DELETE","PATCH") // Allowed HTTP methods[m
[32m+[m[32m                    .allowedHeaders("*"); // Allow all headers[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/controller/RoomsController.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/controller/RoomsController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f8f54d0[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/controller/RoomsController.java[m
[36m@@ -0,0 +1,89 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.DTO.RoomsDTO;[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.Rooms;[m
[32m+[m[32mimport com.HavenHub.rooms_service.service.RoomService;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/rooms")[m
[32m+[m[32mpublic class RoomsController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      RoomService rs;[m
[32m+[m
[32m+[m[32m//[m
[32m+[m[32m//      @PostMapping(path = "/save")[m
[32m+[m[32m//      public String saveRooms(@RequestBody RoomsDTO rooms){[m
[32m+[m[32m//            return rs.addRooms(rooms);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m//      @PostMapping(path = "/save", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)[m
[32m+[m[32m//      public ResponseEntity<String>  saveRooms([m
[32m+[m[32m//              @RequestParam("hotel_id") int hotelId,[m
[32m+[m[32m//              @RequestParam("room_number") int roomNumber,[m
[32m+[m[32m//              @RequestParam("room_type") String roomType,[m
[32m+[m[32m//              @RequestParam("price") int price,[m
[32m+[m[32m//              @RequestParam("is_available") String isAvailable,[m
[32m+[m[32m//              @RequestParam("room_photo") MultipartFile roomPhoto) throws IOException {[m
[32m+[m[32m//                  // Convert MultipartFile to byte[][m
[32m+[m[32m//                  byte[] photoBytes = roomPhoto.getBytes();[m
[32m+[m[32m//[m
[32m+[m[32m//                  // Create Rooms entity and save[m
[32m+[m[32m//                  RoomsDTO room = new RoomsDTO(hotelId, roomNumber, roomType, price, isAvailable, photoBytes);[m
[32m+[m[32m//                  return new ResponseEntity<>(rs.addRooms(room),HttpStatus.OK);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/save")[m
[32m+[m[32m      public ResponseEntity<String> addRoom([m
[32m+[m[32m              @RequestParam("hotel_id") int hotelId,[m
[32m+[m[32m              @RequestParam("room_number") int roomNumber,[m
[32m+[m[32m              @RequestParam("room_type") String roomType,[m
[32m+[m[32m              @RequestParam("price") int price,[m
[32m+[m[32m              @RequestParam("is_available") String isAvailable,[m
[32m+[m[32m              @RequestParam("room_photo") MultipartFile roomPhoto) {[m
[32m+[m
[32m+[m[32m            // Save the room photo in the images/rooms folder[m
[32m+[m[32m            String uploadDir = "src/main/resources/images/rooms/";[m
[32m+[m[32m            File uploadFolder = new File(uploadDir);[m
[32m+[m[32m            if (!uploadFolder.exists()) {[m
[32m+[m[32m                  uploadFolder.mkdirs(); // Create directory if it doesn't exist[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            String photoFileName = System.currentTimeMillis() + "_" + roomPhoto.getOriginalFilename();[m
[32m+[m[32m            File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m            try {[m
[32m+[m[32m                  roomPhoto.transferTo(photoFile); // Save the file[m
[32m+[m[32m            } catch (IOException e) {[m
[32m+[m[32m                  return new ResponseEntity<>("Failed to upload room photo", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Save room details to the database[m
[32m+[m[32m            String photoPath = "/images/rooms/" + photoFileName; // Relative path to store in the database[m
[32m+[m[32m            RoomsDTO room = new RoomsDTO(hotelId, roomNumber, roomType, price, isAvailable, photoPath);[m
[32m+[m[32m            rs.addRooms(room);[m
[32m+[m
[32m+[m[32m            return new ResponseEntity<>("Room added successfully!", HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path="getAllRooms/{hotel_id}")[m
[32m+[m[32m      public ResponseEntity<List<Rooms>> getAllHotels(@PathVariable("hotel_id") int  hotel_id){[m
[32m+[m[32m            List<Rooms>r= rs.getRooms(hotel_id);[m
[32m+[m[32m            if(r.isEmpty())[m
[32m+[m[32m                  return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);[m
[32m+[m[32m            return new ResponseEntity<>(r,HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Hotel.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Hotel.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9406aa9[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Hotel.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.entity;[m
[32m+[m[32m//Data Transfer Object[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class Hotel {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private float ratings;[m
[32m+[m[32m      private String address;[m
[32m+[m[32m      private String features;[m
[32m+[m[32m      private String city;[m
[32m+[m[32m      private String hotel_photo;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String location;[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/HotelUser.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/HotelUser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..6d62ef9[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/HotelUser.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelUser {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private String email;[m
[32m+[m[32m      private String password;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String type;[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Rooms.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Rooms.java[m
[1mnew file mode 100644[m
[1mindex 0000000..977acb8[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/entity/Rooms.java[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "rooms")[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class Rooms {[m
[32m+[m
[32m+[m[32m      @Id[m
[32m+[m[32m      @GeneratedValue(strategy = GenerationType.AUTO)[m
[32m+[m[32m      @Column(name = "room_id")[m
[32m+[m[32m      private int room_id;[m
[32m+[m
[32m+[m[32m      @Column(name = "hotel_id", nullable = false)  // Foreign key reference to Hotel.[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      @Column(name = "room_number")[m
[32m+[m[32m      private int room_number;[m
[32m+[m
[32m+[m[32m      @Column(name = "room_type")[m
[32m+[m[32m      private String roomType;[m
[32m+[m
[32m+[m[32m      @Column(name = "price")[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m      @Column(name = "is_available")[m
[32m+[m[32m      private String isAvailable;[m
[32m+[m
[32m+[m[32m      @Column(name = "room_photo")[m
[32m+[m[32m      private String room_photo;[m
[32m+[m
[32m+[m[32m      public Rooms( int hotel_id, int room_number, String roomType,[m
[32m+[m[32m                   int price, String isAvailable, String room_photo) {[m
[32m+[m[32m            this.hotel_id = hotel_id;[m
[32m+[m[32m            this.room_number = room_number;[m
[32m+[m[32m            this.roomType = roomType;[m
[32m+[m[32m            this.price = price;[m
[32m+[m[32m            this.isAvailable = isAvailable;[m
[32m+[m[32m            this.room_photo = room_photo;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/repository/RoomsRepo.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/repository/RoomsRepo.java[m
[1mnew file mode 100644[m
[1mindex 0000000..aaa0f43[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/repository/RoomsRepo.java[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.repository;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.Rooms;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.Query;[m
[32m+[m[32mimport org.springframework.data.repository.query.Param;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic interface RoomsRepo extends JpaRepository<Rooms,Integer> {[m
[32m+[m
[32m+[m[32m      @Query("SELECT r FROM Rooms r WHERE r.hotel_id = :id")[m
[32m+[m[32m      List<Rooms> findByHotelId(@Param("id") int id);[m
[32m+[m
[32m+[m[32m      @Query("SELECT r FROM Rooms r WHERE r.room_id = :id")[m
[32m+[m[32m      Rooms findByRoom_id(@Param("id") int id);[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/service/JWTService.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..493412e[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/JWTService.java[m
[36m@@ -0,0 +1,67 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.service;[m
[32m+[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m[32mimport javax.crypto.SecretKey;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m[32m      private String secretKey = "N2VGejNuOV5US3F2V3pUNzFNc3BLO0hOXFFGMnJYOV9zZmNEOXR1eEdkUHpIekx6WU5ab0N6N2V4YTd4bWpmbHQA";[m
[32m+[m
[32m+[m
[32m+[m[32m      public JWTService() {[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String generateToken(String username) {[m
[32m+[m[32m            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m                    expiration(new Date(System.currentTimeMillis() + 108000000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private SecretKey getKey() {[m
[32m+[m[32m            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String extractUserName(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m            return claimResolver.apply(claims);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Claims extractAllClaims(String token) {[m
[32m+[m[32m            return Jwts.parser().[m
[32m+[m[32m                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m            String userName = this.extractUserName(token);[m
[32m+[m[32m            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private boolean isTokenExpired(String token) {[m
[32m+[m[32m            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Date extractExpiration(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/service/MyUserDetailsService.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/MyUserDetailsService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7703597[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/MyUserDetailsService.java[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.DTO.UserPrincipalDTO;[m
[32m+[m[32mimport com.HavenHub.rooms_service.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.HotelUser;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class MyUserDetailsService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private UserInterface ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private HttpSession session;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m            HotelUser user;[m
[32m+[m
[32m+[m[32m            // Determine if identifier is an email or username[m
[32m+[m[32m            if (identifier.contains("@")) { // Assume email if '@' is present[m
[32m+[m[32m                  user = ur.getByEmail(identifier).getBody();[m
[32m+[m[32m            } else {[m
[32m+[m[32m                  user = ur.getByName(identifier).getBody();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user == null) {[m
[32m+[m[32m                  System.out.println("User Not Found");[m
[32m+[m[32m                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m            }[m
[32m+[m[32m           session.setAttribute("role",user.getType());[m
[32m+[m
[32m+[m[32m            return new UserPrincipalDTO(user); // Use UserPrincipalDTO to return user details[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/java/com/HavenHub/rooms_service/service/RoomService.java b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/RoomService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cb4e8b0[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/java/com/HavenHub/rooms_service/service/RoomService.java[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.rooms_service.DTO.RoomsDTO;[m
[32m+[m[32mimport com.HavenHub.rooms_service.entity.Rooms;[m
[32m+[m[32mimport com.HavenHub.rooms_service.repository.RoomsRepo;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class RoomService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      RoomsRepo rr;[m
[32m+[m
[32m+[m[32m      public String addRooms(RoomsDTO rooms) {[m
[32m+[m[32m            Rooms r=new Rooms(rooms.getHotel_id(),rooms.getRoom_number(),rooms.getRoomType(),[m
[32m+[m[32m                    rooms.getPrice(),rooms.getIsAvailable(),rooms.getRoom_photo());[m
[32m+[m[32m            rr.save(r);[m
[32m+[m[32m            return "Success";[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public List<Rooms> getRooms(int hotel_id) {[m
[32m+[m[32m            return rr.findByHotelId(hotel_id);[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/RoomsService/src/main/resources/application.properties b/RoomsService/src/main/resources/application.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..c8be7f0[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/main/resources/application.properties[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m# Application Name[m
[32m+[m[32mspring.application.name=rooms-service[m
[32m+[m
[32m+[m[32m# JPA and Hibernate[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mspring.jpa.show-sql=true[m
[32m+[m
[32m+[m
[32m+[m[32m#[m
[32m+[m[32m## OAuth2 Client Registration[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-id=708656180433-9pfcgi05gpjd4chbpnlbdatmq2pi2k6p.apps.googleusercontent.com[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-secret=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[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.scope=openid,profile,email[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8085/login/oauth2/code/google[m
[32m+[m[32m#[m
[32m+[m
[32m+[m[32m# Enable detailed security logs (for debugging)[m
[32m+[m[32mlogging.level.org.springframework.security=DEBUG[m
[32m+[m
[32m+[m[32mlogging.level.org.apache.maven=DEBUG[m
[32m+[m
[32m+[m
[32m+[m[32m# Database Configuration[m
[32m+[m[32mspring.datasource.url=jdbc:mysql://localhost:3306/rooms_service[m
[32m+[m[32mspring.datasource.username=root[m
[32m+[m[32mspring.datasource.password=abishek@1[m
[32m+[m[32mspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
[1mdiff --git a/RoomsService/src/test/java/com/HavenHub/rooms_service/RoomsServiceApplicationTests.java b/RoomsService/src/test/java/com/HavenHub/rooms_service/RoomsServiceApplicationTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..48a6623[m
[1m--- /dev/null[m
[1m+++ b/RoomsService/src/test/java/com/HavenHub/rooms_service/RoomsServiceApplicationTests.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.rooms_service;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32mclass RoomsServiceApplicationTests {[m
[32m+[m
[32m+[m	[32m@Test[m
[32m+[m	[32mvoid contextLoads() {[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/.gitattributes b/UserService/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..3b41682[m
[1m--- /dev/null[m
[1m+++ b/UserService/.gitattributes[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m/mvnw text eol=lf[m
[32m+[m[32m*.cmd text eol=crlf[m
[1mdiff --git a/UserService/.gitignore b/UserService/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..549e00a[m
[1m--- /dev/null[m
[1m+++ b/UserService/.gitignore[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mHELP.md[m
[32m+[m[32mtarget/[m
[32m+[m[32m!.mvn/wrapper/maven-wrapper.jar[m
[32m+[m[32m!**/src/main/**/target/[m
[32m+[m[32m!**/src/test/**/target/[m
[32m+[m
[32m+[m[32m### STS ###[m
[32m+[m[32m.apt_generated[m
[32m+[m[32m.classpath[m
[32m+[m[32m.factorypath[m
[32m+[m[32m.project[m
[32m+[m[32m.settings[m
[32m+[m[32m.springBeans[m
[32m+[m[32m.sts4-cache[m
[32m+[m
[32m+[m[32m### IntelliJ IDEA ###[m
[32m+[m[32m.idea[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m
[32m+[m[32m### NetBeans ###[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/.nb-gradle/[m
[32m+[m[32mbuild/[m
[32m+[m[32m!**/src/main/**/build/[m
[32m+[m[32m!**/src/test/**/build/[m
[32m+[m
[32m+[m[32m### VS Code ###[m
[32m+[m[32m.vscode/[m
[1mdiff --git a/UserService/.mvn/wrapper/maven-wrapper.properties b/UserService/.mvn/wrapper/maven-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..d58dfb7[m
[1m--- /dev/null[m
[1m+++ b/UserService/.mvn/wrapper/maven-wrapper.properties[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#   http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32mwrapperVersion=3.3.2[m
[32m+[m[32mdistributionType=only-script[m
[32m+[m[32mdistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip[m
[1mdiff --git a/UserService/mvnw b/UserService/mvnw[m
[1mnew file mode 100644[m
[1mindex 0000000..19529dd[m
[1m--- /dev/null[m
[1m+++ b/UserService/mvnw[m
[36m@@ -0,0 +1,259 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m#[m
[32m+[m[32m# Optional ENV vars[m
[32m+[m[32m# -----------------[m
[32m+[m[32m#   JAVA_HOME - location of a JDK home dir, required when download maven via java source[m
[32m+[m[32m#   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mset -euf[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != debug ] || set -x[m
[32m+[m
[32m+[m[32m# OS specific support.[m
[32m+[m[32mnative_path() { printf %s\\n "$1"; }[m
[32m+[m[32mcase "$(uname)" in[m
[32m+[m[32mCYGWIN* | MINGW*)[m
[32m+[m[32m  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"[m
[32m+[m[32m  native_path() { cygpath --path --windows "$1"; }[m
[32m+[m[32m  ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# set JAVACMD and JAVACCMD[m
[32m+[m[32mset_java_home() {[m
[32m+[m[32m  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched[m
[32m+[m[32m  if [ -n "${JAVA_HOME-}" ]; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ]; then[m
[32m+[m[32m      # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/jre/sh/javac"[m
[32m+[m[32m    else[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/bin/javac"[m
[32m+[m
[32m+[m[32m      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then[m
[32m+[m[32m        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2[m
[32m+[m[32m        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2[m
[32m+[m[32m        return 1[m
[32m+[m[32m      fi[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    JAVACMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v java[m
[32m+[m[32m    )" || :[m
[32m+[m[32m    JAVACCMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v javac[m
[32m+[m[32m    )" || :[m
[32m+[m
[32m+[m[32m    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then[m
[32m+[m[32m      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2[m
[32m+[m[32m      return 1[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# hash string like Java String::hashCode[m
[32m+[m[32mhash_string() {[m
[32m+[m[32m  str="${1:-}" h=0[m
[32m+[m[32m  while [ -n "$str" ]; do[m
[32m+[m[32m    char="${str%"${str#?}"}"[m
[32m+[m[32m    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))[m
[32m+[m[32m    str="${str#?}"[m
[32m+[m[32m  done[m
[32m+[m[32m  printf %x\\n $h[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mverbose() { :; }[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }[m
[32m+[m
[32m+[m[32mdie() {[m
[32m+[m[32m  printf %s\\n "$1" >&2[m
[32m+[m[32m  exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtrim() {[m
[32m+[m[32m  # MWRAPPER-139:[m
[32m+[m[32m  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.[m
[32m+[m[32m  #   Needed for removing poorly interpreted newline sequences when running in more[m
[32m+[m[32m  #   exotic environments such as mingw bash on Windows.[m
[32m+[m[32m  printf "%s" "${1}" | tr -d '[:space:]'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32mwhile IFS="=" read -r key value; do[m
[32m+[m[32m  case "${key-}" in[m
[32m+[m[32m  distributionUrl) distributionUrl=$(trim "${value-}") ;;[m
[32m+[m[32m  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m
[32m+[m[32mcase "${distributionUrl##*/}" in[m
[32m+[m[32mmaven-mvnd-*bin.*)[m
[32m+[m[32m  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/[m
[32m+[m[32m  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in[m
[32m+[m[32m  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;[m
[32m+[m[32m  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;[m
[32m+[m[32m  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;[m
[32m+[m[32m  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;[m
[32m+[m[32m  *)[m
[32m+[m[32m    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2[m
[32m+[m[32m    distributionPlatform=linux-amd64[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32m  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"[m
[32m+[m[32m  ;;[m
[32m+[m[32mmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;[m
[32m+[m[32m*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32m[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"[m
[32m+[m[32mdistributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlName%.*}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlNameMain%-bin}"[m
[32m+[m[32mMAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"[m
[32m+[m[32mMAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"[m
[32m+[m
[32m+[m[32mexec_maven() {[m
[32m+[m[32m  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :[m
[32m+[m[32m  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif [ -d "$MAVEN_HOME" ]; then[m
[32m+[m[32m  verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  exec_maven "$@"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mcase "${distributionUrl-}" in[m
[32m+[m[32m*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;[m
[32m+[m[32m*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32mif TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then[m
[32m+[m[32m  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }[m
[32m+[m[32m  trap clean HUP INT TERM EXIT[m
[32m+[m[32melse[m
[32m+[m[32m  die "cannot create temp dir"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mmkdir -p -- "${MAVEN_HOME%/*}"[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mverbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mverbose "Downloading from: $distributionUrl"[m
[32m+[m[32mverbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m# select .zip or .tar.gz[m
[32m+[m[32mif ! command -v unzip >/dev/null; then[m
[32m+[m[32m  distributionUrl="${distributionUrl%.zip}.tar.gz"[m
[32m+[m[32m  distributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# verbose opt[m
[32m+[m[32m__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v[m
[32m+[m
[32m+[m[32m# normalize http auth[m
[32m+[m[32mcase "${MVNW_PASSWORD:+has-password}" in[m
[32m+[m[32m'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mhas-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mif [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then[m
[32m+[m[32m  verbose "Found wget ... using wget"[m
[32m+[m[32m  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"[m
[32m+[m[32melif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then[m
[32m+[m[32m  verbose "Found curl ... using curl"[m
[32m+[m[32m  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"[m
[32m+[m[32melif set_java_home; then[m
[32m+[m[32m  verbose "Falling back to use Java to download"[m
[32m+[m[32m  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"[m
[32m+[m[32m  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m[32m  cat >"$javaSource" <<-END[m
[32m+[m	[32mpublic class Downloader extends java.net.Authenticator[m
[32m+[m	[32m{[m
[32m+[m	[32m  protected java.net.PasswordAuthentication getPasswordAuthentication()[m
[32m+[m	[32m  {[m
[32m+[m	[32m    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m  public static void main( String[] args ) throws Exception[m
[32m+[m	[32m  {[m
[32m+[m	[32m    setDefault( new Downloader() );[m
[32m+[m	[32m    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m}[m
[32m+[m	[32mEND[m
[32m+[m[32m  # For Cygwin/MinGW, switch paths to Windows format before running javac and java[m
[32m+[m[32m  verbose " - Compiling Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"[m
[32m+[m[32m  verbose " - Running Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32mif [ -n "${distributionSha256Sum-}" ]; then[m
[32m+[m[32m  distributionSha256Result=false[m
[32m+[m[32m  if [ "$MVN_CMD" = mvnd.sh ]; then[m
[32m+[m[32m    echo "Checksum validation is not supported for maven-mvnd." >&2[m
[32m+[m[32m    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  elif command -v sha256sum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  elif command -v shasum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2[m
[32m+[m[32m    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32m  if [ $distributionSha256Result = false ]; then[m
[32m+[m[32m    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2[m
[32m+[m[32m    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mif command -v unzip >/dev/null; then[m
[32m+[m[32m  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"[m
[32m+[m[32melse[m
[32m+[m[32m  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"[m
[32m+[m[32mfi[m
[32m+[m[32mprintf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"[m
[32m+[m[32mmv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"[m
[32m+[m
[32m+[m[32mclean || :[m
[32m+[m[32mexec_maven "$@"[m
[1mdiff --git a/UserService/mvnw.cmd b/UserService/mvnw.cmd[m
[1mnew file mode 100644[m
[1mindex 0000000..249bdf3[m
[1m--- /dev/null[m
[1m+++ b/UserService/mvnw.cmd[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<# : batch portion[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m@REM or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m@REM distributed with this work for additional information[m
[32m+[m[32m@REM regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m@REM to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m@REM "License"); you may not use this file except in compliance[m
[32m+[m[32m@REM with the License.  You may obtain a copy of the License at[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m@REM software distributed under the License is distributed on an[m
[32m+[m[32m@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m@REM KIND, either express or implied.  See the License for the[m
[32m+[m[32m@REM specific language governing permissions and limitations[m
[32m+[m[32m@REM under the License.[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Optional ENV vars[m
[32m+[m[32m@REM   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)[m
[32m+[m[32m@SET __MVNW_CMD__=[m
[32m+[m[32m@SET __MVNW_ERROR__=[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%[m
[32m+[m[32m@SET PSModulePath=[m
[32m+[m[32m@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @([m
[32m+[m[32m  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)[m
[32m+[m[32m)[m
[32m+[m[32m@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=[m
[32m+[m[32m@SET __MVNW_ARG0_NAME__=[m
[32m+[m[32m@SET MVNW_USERNAME=[m
[32m+[m[32m@SET MVNW_PASSWORD=[m
[32m+[m[32m@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)[m
[32m+[m[32m@echo Cannot start maven from wrapper >&2 && exit /b 1[m
[32m+[m[32m@GOTO :EOF[m
[32m+[m[32m: end batch / begin powershell #>[m
[32m+[m
[32m+[m[32m$ErrorActionPreference = "Stop"[m
[32m+[m[32mif ($env:MVNW_VERBOSE -eq "true") {[m
[32m+[m[32m  $VerbosePreference = "Continue"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32m$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl[m
[32m+[m[32mif (!$distributionUrl) {[m
[32m+[m[32m  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {[m
[32m+[m[32m  "maven-mvnd-*" {[m
[32m+[m[32m    $USE_MVND = $true[m
[32m+[m[32m    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"[m
[32m+[m[32m    $MVN_CMD = "mvnd.cmd"[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m  default {[m
[32m+[m[32m    $USE_MVND = $false[m
[32m+[m[32m    $MVN_CMD = $script -replace '^mvnw','mvn'[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32mif ($env:MVNW_REPOURL) {[m
[32m+[m[32m  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }[m
[32m+[m[32m  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"[m
[32m+[m[32m}[m
[32m+[m[32m$distributionUrlName = $distributionUrl -replace '^.*/',''[m
[32m+[m[32m$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''[m
[32m+[m[32m$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32mif ($env:MAVEN_USER_HOME) {[m
[32m+[m[32m  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32m}[m
[32m+[m[32m$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''[m
[32m+[m[32m$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"[m
[32m+[m
[32m+[m[32mif (Test-Path -Path "$MAVEN_HOME" -PathType Container) {[m
[32m+[m[32m  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m  exit $?[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {[m
[32m+[m[32m  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile[m
[32m+[m[32m$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null[m
[32m+[m[32mtrap {[m
[32m+[m[32m  if ($TMP_DOWNLOAD_DIR.Exists) {[m
[32m+[m[32m    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mNew-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mWrite-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mWrite-Verbose "Downloading from: $distributionUrl"[m
[32m+[m[32mWrite-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m$webclient = New-Object System.Net.WebClient[m
[32m+[m[32mif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {[m
[32m+[m[32m  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)[m
[32m+[m[32m}[m
[32m+[m[32m[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12[m
[32m+[m[32m$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32m$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum[m
[32m+[m[32mif ($distributionSha256Sum) {[m
[32m+[m[32m  if ($USE_MVND) {[m
[32m+[m[32m    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."[m
[32m+[m[32m  }[m
[32m+[m[32m  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash[m
[32m+[m[32m  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {[m
[32m+[m[32m    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mExpand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null[m
[32m+[m[32mRename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null[m
[32m+[m[32mtry {[m
[32m+[m[32m  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null[m
[32m+[m[32m} catch {[m
[32m+[m[32m  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {[m
[32m+[m[32m    Write-Error "fail to move MAVEN_HOME"[m
[32m+[m[32m  }[m
[32m+[m[32m} finally {[m
[32m+[m[32m  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mWrite-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[1mdiff --git a/UserService/pom.xml b/UserService/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..cce835a[m
[1m--- /dev/null[m
[1m+++ b/UserService/pom.xml[m
[36m@@ -0,0 +1,116 @@[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m		[32m xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.1.4</version>[m
[32m+[m		[32m<relativePath/>[m
[32m+[m	[32m</parent>[m
[32m+[m	[32m<groupId>sb</groupId>[m
[32m+[m	[32m<artifactId>HotelBooking</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m	[32m<name>HotelBooking</name>[m
[32m+[m	[32m<description>Demo project for Spring Boot</description>[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>17</java.version>[m
[32m+[m	[32m</properties>[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>2022.0.4</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<!-- Spring Boot Starters -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-data-jpa</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-oauth2-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-openfeign</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- JWT Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Lombok -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<version>1.18.30</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- MySQL Driver -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.mysql</groupId>[m
[32m+[m			[32m<artifactId>mysql-connector-j</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- DevTools -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-devtools</artifactId>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m			[32m<optional>true</optional>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- Test Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m[32m</project>[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/DTO/HotelUserDTO.java b/UserService/src/main/java/com/HavenHub/user_service/DTO/HotelUserDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..db5ae59[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/DTO/HotelUserDTO.java[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.DTO;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelUserDTO {[m
[32m+[m
[32m+[m[32m      private String username;[m
[32m+[m[32m      private String email;[m
[32m+[m[32m      private String password;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String type;[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/DTO/UserPrincipalDTO.java b/UserService/src/main/java/com/HavenHub/user_service/DTO/UserPrincipalDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..1c10df1[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/DTO/UserPrincipalDTO.java[m
[36m@@ -0,0 +1,58 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.DTO;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class UserPrincipalDTO implements UserDetails {[m
[32m+[m
[32m+[m[32m      private HotelUser user;[m
[32m+[m
[32m+[m[32m      public UserPrincipalDTO(HotelUser user) {[m
[32m+[m[32m            this.user=user;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m            return Collections.singleton(new SimpleGrantedAuthority(user.getType()));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getPassword() {[m
[32m+[m[32m            return user.getPassword();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getUsername() {[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonLocked() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isCredentialsNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isEnabled() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/UserServiceApplication.java b/UserService/src/main/java/com/HavenHub/user_service/UserServiceApplication.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cd990af[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/UserServiceApplication.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.user_service;[m
[32m+[m
[32m+[m[32mimport org.springframework.boot.SpringApplication;[m
[32m+[m[32mimport org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m
[32m+[m[32m@SpringBootApplication[m
[32m+[m[32mpublic class UserServiceApplication {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32mSpringApplication.run(UserServiceApplication.class, args);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/configuration/JWTFilter.java b/UserService/src/main/java/com/HavenHub/user_service/configuration/JWTFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..224ae98[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/configuration/JWTFilter.java[m
[36m@@ -0,0 +1,104 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.service.JWTService;[m
[32m+[m[32mimport com.HavenHub.user_service.service.MyUserDetailsService;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.ApplicationContext;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32mpublic class JWTFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      ApplicationContext context;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      MyUserDetailsService myUserDetailsService;[m
[32m+[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {[m
[32m+[m[32m//[m
[32m+[m[32m//            String authHeader=request.getHeader("Authorization");[m
[32m+[m[32m//            String token=null;[m
[32m+[m[32m//            String username=null;[m
[32m+[m[32m//[m
[32m+[m[32m//            if(authHeader!=null&&authHeader.startsWith("Bearer ")){[m
[32m+[m[32m//                  token=authHeader.substring(7);[m
[32m+[m[32m//                  username=jwtService.extractUserName(token);[m
[32m+[m[32m//            }[m
[32m+[m[32m//            if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null){[m
[32m+[m[32m//                  UserDetails userDetails=context.getBean(MyUserDetailsService.class).[m
[32m+[m[32m//                          loadUserByUsername(username);[m
[32m+[m[32m//                  if(jwtService.validateTokens(token,userDetails)){[m
[32m+[m[32m//                        UsernamePasswordAuthenticationToken authenticationToken=[m
[32m+[m[32m//                                new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());[m
[32m+[m[32m//                        authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m//                        SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m//                  }[m
[32m+[m[32m//            }[m
[32m+[m[32m//            filterChain.doFilter(request,response);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)[m
[32m+[m[32m              throws ServletException, IOException {[m
[32m+[m
[32m+[m[32m            String authHeader = request.getHeader("Authorization");[m
[32m+[m[32m            String token = null;[m
[32m+[m[32m            String username = null;[m
[32m+[m
[32m+[m[32m            // Validate the Authorization header[m
[32m+[m[32m            if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m                  filterChain.doFilter(request, response);[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Extract the token[m
[32m+[m[32m            token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                  // Extract username from token[m
[32m+[m[32m                  username = jwtService.extractUserName(token);[m
[32m+[m
[32m+[m[32m                  if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                        // Load user details[m
[32m+[m[32m                        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);[m
[32m+[m
[32m+[m[32m                        // Validate the token[m
[32m+[m[32m                        if (jwtService.validateTokens(token, userDetails)) {[m
[32m+[m[32m                              UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                                      new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m                              authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                              SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                              logger.warn("Invalid JWT token for user: " + username);[m
[32m+[m[32m                        }[m
[32m+[m[32m                  }[m
[32m+[m[32m            } catch (Exception ex) {[m
[32m+[m[32m                  logger.error("Error during JWT validation: ", ex);[m
[32m+[m[32m                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                  response.getWriter().write("Unauthorized");[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/configuration/SecurityConfig.java b/UserService/src/main/java/com/HavenHub/user_service/configuration/SecurityConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..65de851[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/configuration/SecurityConfig.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.configuration;[m
[32m+[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.repository.HotelUserRepo;[m
[32m+[m[32mimport com.HavenHub.user_service.service.HotelUserService;[m
[32m+[m[32mimport com.HavenHub.user_service.service.JWTService;[m
[32m+[m[32mimport com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.config.Customizer;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@EnableWebSecurity[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m            return http.csrf(AbstractHttpConfigurer::disable) // Disable CSRF[m
[32m+[m[32m                    .cors(Customizer.withDefaults()) // Enable CORS if required[m
[32m+[m[32m                    .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m                            .anyRequest().permitAll() // Allow all requests[m
[32m+[m[32m                    )[m
[32m+[m[32m                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Stateless session[m
[32m+[m[32m                    .build();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public PasswordEncoder passwordEncoder(){[m
[32m+[m[32m            return new BCryptPasswordEncoder();[m
[32m+[m[32m      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public AuthenticationProvider authenticationProvider(){[m
[32m+[m[32m//            DaoAuthenticationProvider provider=new DaoAuthenticationProvider();[m
[32m+[m[32m//            provider.setPasswordEncoder(new BCryptPasswordEncoder());[m
[32m+[m[32m//            provider.setUserDetailsService(userDetailsService);[m
[32m+[m[32m//            return provider;[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {[m
[32m+[m[32m//            return config.getAuthenticationManager();[m
[32m+[m[32m      //}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/configuration/WebConfig.java b/UserService/src/main/java/com/HavenHub/user_service/configuration/WebConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ac74b4a[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/configuration/WebConfig.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.configuration;[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32mimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mclass WebConfig implements WebMvcConfigurer {[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m            registry.addMapping("/api/v1/**") // Apply to all paths[m
[32m+[m[32m                    .allowedOrigins("http://localhost:3000") // Allow frontend origin[m
[32m+[m[32m                    .allowedMethods("GET", "POST", "PUT", "DELETE","PATCH") // Allowed HTTP methods[m
[32m+[m[32m                    .allowedHeaders("*"); // Allow all headers[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/controller/HotelUserController.java b/UserService/src/main/java/com/HavenHub/user_service/controller/HotelUserController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..483f48e[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/controller/HotelUserController.java[m
[36m@@ -0,0 +1,185 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.DTO.HotelUserDTO;[m
[32m+[m[32mimport com.HavenHub.user_service.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.user_service.repository.HotelUserRepo;[m
[32m+[m[32mimport com.HavenHub.user_service.service.HotelUserService;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.Objects;[m
[32m+[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/user")[m
[32m+[m[32mpublic class HotelUserController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelUserRepo ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelUserService us;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HttpSession session;[m
[32m+[m
[32m+[m[32m      @PostMapping("/registerUser")[m
[32m+[m[32m      public ResponseEntity<String> saveUser(@RequestBody HotelUser user){[m
[32m+[m[32m            if (us.addUser(user).equals("conflict"))[m
[32m+[m[32m                  return new ResponseEntity<>("Email already exists in DB", HttpStatus.CONFLICT);[m
[32m+[m
[32m+[m[32m            return new ResponseEntity<>(us.addUser(user), HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/save")[m
[32m+[m[32m      public ResponseEntity<String> saveUser([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) MultipartFile photo) {[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            String photoPath = null;[m
[32m+[m[32m            if (photo != null) {[m
[32m+[m[32m                  String uploadDir = "src/main/resources/images/user";[m
[32m+[m[32m                  File uploadFolder = new File(uploadDir);[m
[32m+[m[32m                  if (!uploadFolder.exists()) {[m
[32m+[m[32m                        uploadFolder.mkdirs();[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m                  File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m                  try {[m
[32m+[m[32m                        photo.transferTo(photoFile);[m
[32m+[m[32m                        photoPath = "/images/user" + photoFileName; // Relative path to store in DB[m
[32m+[m[32m                  } catch (IOException e) {[m
[32m+[m[32m                        return new ResponseEntity<>("error", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m                  }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Create user entity[m
[32m+[m[32m            HotelUser user = new HotelUser(name, email, password, mobile, type, photoPath);[m
[32m+[m
[32m+[m[32m            // Save the user[m
[32m+[m[32m            if (us.addUser(user).equals("conflict"))[m
[32m+[m[32m                  return new ResponseEntity<>("Email already exists in DB", HttpStatus.CONFLICT);[m
[32m+[m
[32m+[m[32m            return new ResponseEntity<>(us.addUser(user), HttpStatus.OK);[m
[32m+[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @PostMapping("/registerAdmin")[m
[32m+[m[32m      public ResponseEntity<String> saveAdmin(@RequestBody HotelUser user){[m
[32m+[m[32m            if (us.addAdmin(user).equals("conflict"))[m
[32m+[m[32m                  return new ResponseEntity<>("Email already exists in DB", HttpStatus.CONFLICT);[m
[32m+[m
[32m+[m[32m            return new ResponseEntity<>(us.addUser(user), HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping(path = "/saveAdmin")[m
[32m+[m[32m      public ResponseEntity<String> saveAdmin([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) MultipartFile photo) {[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            String photoPath = null;[m
[32m+[m[32m            if (photo != null) {[m
[32m+[m[32m                  String uploadDir = "src/main/resources/images/admin";[m
[32m+[m[32m                  File uploadFolder = new File(uploadDir);[m
[32m+[m[32m                  if (!uploadFolder.exists()) {[m
[32m+[m[32m                        uploadFolder.mkdirs();[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m                  File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m                  try {[m
[32m+[m[32m                        photo.transferTo(photoFile);[m
[32m+[m[32m                        photoPath = "/images/admin" + photoFileName; // Relative path to store in DB[m
[32m+[m[32m                  } catch (IOException e) {[m
[32m+[m[32m                        return new ResponseEntity<>("error", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m                  }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Create user entity[m
[32m+[m[32m            HotelUser user = new HotelUser(name, email, password, mobile, type, photoPath);[m
[32m+[m
[32m+[m[32m            if (us.addAdmin(user).equals("conflict"))[m
[32m+[m[32m                  return new ResponseEntity<>("Email already exists in DB", HttpStatus.CONFLICT);[m
[32m+[m
[32m+[m[32m            return new ResponseEntity<>(us.addAdmin(user), HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m//      @PostMapping("/login")[m
[32m+[m[32m//      public ResponseEntity<Map<String, String>> login(@RequestBody HotelUserDTO user, HttpServletResponse httpServletResponse) {[m
[32m+[m[32m//            String token = us.loginUser(user);[m
[32m+[m[32m//            // 200 OK status for successful login[m
[32m+[m[32m//            String role = (String) session.getAttribute("role");[m
[32m+[m[32m//            HotelUser u = ur.findByEmail(user.getEmail());[m
[32m+[m[32m//            Map<String, String> response = new HashMap<>();[m
[32m+[m[32m//            response.put("token", token);[m
[32m+[m[32m//            response.put("role", role);[m
[32m+[m[32m//            response.put("userId", String.valueOf(u.getId()));[m
[32m+[m[32m//            response.put("name", u.getName());[m
[32m+[m[32m//            response.put("photo", u.getPhoto());[m
[32m+[m[32m//            if (Objects.equals(token, "failure"))[m
[32m+[m[32m//                  return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);[m
[32m+[m[32m//[m
[32m+[m[32m//            return ResponseEntity.ok(response);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      @GetMapping("/getOne/{id}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getOne(@PathVariable("id") int id) {[m
[32m+[m[32m            HotelUser h = us.getUser(id);[m
[32m+[m[32m            if (h == null) {[m
[32m+[m[32m                  // new ResponseEntity<>(null, new HttpStatus(404));//IT IS ALSO SAME LIKE BELOW ONE[m
[32m+[m[32m                  System.out.println("Login failed");[m
[32m+[m[32m                  return new ResponseEntity<>(null, HttpStatus.valueOf(404));//NOT FOUND[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println("Login successful");[m
[32m+[m[32m            return new ResponseEntity<>(h, HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping("/getByEmail/{email}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByEmail(@PathVariable("email") String email){[m
[32m+[m[32m            HotelUser h = us.getByEmail(email);[m
[32m+[m[32m            if (h == null) {[m
[32m+[m[32m                  // new ResponseEntity<>(null, new HttpStatus(404));//IT IS ALSO SAME LIKE BELOW ONE[m
[32m+[m[32m                  System.out.println("No such user is present");[m
[32m+[m[32m                  return new ResponseEntity<>(null, HttpStatus.valueOf(404));//NOT FOUND[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println(h);[m
[32m+[m[32m            return new ResponseEntity<>(h, HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping("/getByName/{name}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getByName(@PathVariable("name") String name){[m
[32m+[m[32m            HotelUser h = us.getByName(name);[m
[32m+[m[32m            if (h == null) {[m
[32m+[m[32m                  // new ResponseEntity<>(null, new HttpStatus(404));//IT IS ALSO SAME LIKE BELOW ONE[m
[32m+[m[32m                  System.out.println("No such user is present");[m
[32m+[m[32m                  return new ResponseEntity<>(null, HttpStatus.valueOf(404));//NOT FOUND[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println(h);[m
[32m+[m[32m            return new ResponseEntity<>(h, HttpStatus.OK);[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/entity/HotelUser.java b/UserService/src/main/java/com/HavenHub/user_service/entity/HotelUser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d7f67b9[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/entity/HotelUser.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "user")[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class HotelUser {[m
[32m+[m
[32m+[m[32m      @Id[m
[32m+[m[32m      @GeneratedValue(strategy = GenerationType.AUTO)[m
[32m+[m[32m      @Column(name = "user_id")[m
[32m+[m[32m      private int id;[m
[32m+[m
[32m+[m[32m      @Column(name = "username")[m
[32m+[m[32m      private String name;[m
[32m+[m
[32m+[m[32m      @Column(name = "email", nullable = false, unique = true)[m
[32m+[m[32m      private String email;[m
[32m+[m
[32m+[m[32m      @Column(name = "password")[m
[32m+[m[32m      private String password;[m
[32m+[m
[32m+[m[32m      @Column(name = "mobile")[m
[32m+[m[32m      private String mobile;[m
[32m+[m
[32m+[m[32m      @Column(name = "type")[m
[32m+[m[32m      private String type;[m
[32m+[m
[32m+[m[32m      @Column(name = "photo")[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m[32m      // No reference to Booking entity[m
[32m+[m[32m      public HotelUser(String name, String email, String password, String mobile, String type, String photo) {[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m            this.email = email;[m
[32m+[m[32m            this.password = password;[m
[32m+[m[32m            this.mobile = mobile;[m
[32m+[m[32m            this.type = type;[m
[32m+[m[32m            this.photo = photo;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/repository/HotelUserRepo.java b/UserService/src/main/java/com/HavenHub/user_service/repository/HotelUserRepo.java[m
[1mnew file mode 100644[m
[1mindex 0000000..74c91e7[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/repository/HotelUserRepo.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.repository;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.stereotype.Repository;[m
[32m+[m
[32m+[m[32m@Repository[m
[32m+[m[32mpublic interface HotelUserRepo extends JpaRepository<HotelUser,Integer> {[m
[32m+[m
[32m+[m[32m      HotelUser findByEmail(String email);[m
[32m+[m
[32m+[m[32m      HotelUser findByName(String name);[m
[32m+[m
[32m+[m[32m      HotelUser findById(int id);[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/service/HotelUserService.java b/UserService/src/main/java/com/HavenHub/user_service/service/HotelUserService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..21c49b6[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/service/HotelUserService.java[m
[36m@@ -0,0 +1,74 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.DTO.HotelUserDTO;[m
[32m+[m[32mimport com.HavenHub.user_service.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.user_service.repository.HotelUserRepo;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.Authentication;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class HotelUserService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelUserRepo ur;[m
[32m+[m
[32m+[m[32m//      @Autowired[m
[32m+[m[32m//      AuthenticationManager authenticationManager;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private PasswordEncoder passwordEncoder;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private JWTService jwt;[m
[32m+[m
[32m+[m[32m      public String addUser(HotelUser user) {[m
[32m+[m[32m            if(ur.findByEmail(user.getEmail())!=null)[m
[32m+[m[32m                  return "conflict";[m
[32m+[m[32m            user.setType("user");[m
[32m+[m[32m            ur.save(user);[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String addAdmin(HotelUser user) {[m
[32m+[m[32m            if(ur.findByEmail(user.getEmail())!=null)[m
[32m+[m[32m                  return "conflict";[m
[32m+[m
[32m+[m[32m            user.setType("admin");[m
[32m+[m[32m            ur.save(user);[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m[32m//[m
[32m+[m[32m//      public String loginUser(HotelUserDTO user) {[m
[32m+[m[32m//            Authentication authentication=authenticationManager.authenticate(new UsernamePasswordAuthenticationToken([m
[32m+[m[32m//                    user.getEmail(),user.getPassword()));//IT CALLS AUTHENTICATION MANAGER THEN THE[m
[32m+[m[32m//            // AUTHENTICATION MANAGER CALLS THE AUTHENTICATION PROVIDER[m
[32m+[m[32m//[m
[32m+[m[32m//            if(authentication.isAuthenticated()){[m
[32m+[m[32m//                  HotelUser u=ur.findByEmail(user.getEmail());[m
[32m+[m[32m//                  if (u == null) {[m
[32m+[m[32m//                        throw new UsernameNotFoundException("User not found with email: " + user.getEmail());[m
[32m+[m[32m//                  }[m
[32m+[m[32m//                  return jwt.generateToken(u.getName());[m
[32m+[m[32m//            }[m
[32m+[m[32m//[m
[32m+[m[32m//            return "failure";[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m      public HotelUser getUser(int id) {[m
[32m+[m[32m            return ur.findById(id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public HotelUser getByEmail(String email){[m
[32m+[m[32m            return ur.findByEmail(email);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public HotelUser getByName(String name){[m
[32m+[m[32m            return ur.findByName(name);[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/service/JWTService.java b/UserService/src/main/java/com/HavenHub/user_service/service/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..69183e2[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/service/JWTService.java[m
[36m@@ -0,0 +1,71 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.service;[m
[32m+[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.JwtBuilder;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport java.security.NoSuchAlgorithmException;[m
[32m+[m[32mimport java.util.Base64;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m[32mimport javax.crypto.KeyGenerator;[m
[32m+[m[32mimport javax.crypto.SecretKey;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m[32m      private String secretKey = "N2VGejNuOV5US3F2V3pUNzFNc3BLO0hOXFFGMnJYOV9zZmNEOXR1eEdkUHpIekx6WU5ab0N6N2V4YTd4bWpmbHQA";[m
[32m+[m
[32m+[m
[32m+[m[32m      public JWTService() {[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String generateToken(String username) {[m
[32m+[m[32m            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m                    expiration(new Date(System.currentTimeMillis() + 108000000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private SecretKey getKey() {[m
[32m+[m[32m            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String extractUserName(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m            return claimResolver.apply(claims);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Claims extractAllClaims(String token) {[m
[32m+[m[32m            return Jwts.parser().[m
[32m+[m[32m                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m            String userName = this.extractUserName(token);[m
[32m+[m[32m            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private boolean isTokenExpired(String token) {[m
[32m+[m[32m            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Date extractExpiration(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/UserService/src/main/java/com/HavenHub/user_service/service/MyUserDetailsService.java b/UserService/src/main/java/com/HavenHub/user_service/service/MyUserDetailsService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8659d57[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/java/com/HavenHub/user_service/service/MyUserDetailsService.java[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32mpackage com.HavenHub.user_service.service;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.user_service.DTO.UserPrincipalDTO;[m
[32m+[m[32mimport com.HavenHub.user_service.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.user_service.repository.HotelUserRepo;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class MyUserDetailsService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private HotelUserRepo ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private HttpSession session;[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m            HotelUser user;[m
[32m+[m
[32m+[m[32m            // Determine if identifier is an email or username[m
[32m+[m[32m            if (identifier.contains("@")) { // Assume email if '@' is present[m
[32m+[m[32m                  user = ur.findByEmail(identifier);[m
[32m+[m[32m            } else {[m
[32m+[m[32m                  user = ur.findByName(identifier);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user == null) {[m
[32m+[m[32m                  System.out.println("User Not Found");[m
[32m+[m[32m                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m            }[m
[32m+[m[32m           session.setAttribute("role",user.getType());[m
[32m+[m
[32m+[m[32m            return new UserPrincipalDTO(user); // Use UserPrincipalDTO to return user details[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/UserService/src/main/resources/application.properties b/UserService/src/main/resources/application.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..4aa7515[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/main/resources/application.properties[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m# Application Name[m
[32m+[m[32mspring.application.name=USER-SERVICE[m
[32m+[m[32meureka.client.service-url.defaultZone=http://localhost:8761/eureka/[m
[32m+[m
[32m+[m[32m# JPA and Hibernate[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=update[m
[32m+[m[32mspring.jpa.show-sql=true[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#OAuth2 Client Registration[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-id=708656180433-9pfcgi05gpjd4chbpnlbdatmq2pi2k6p.apps.googleusercontent.com[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.client-secret=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[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.scope=openid,profile,email[m
[32m+[m[32m#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google[m
[32m+[m
[32m+[m[32m# Enable detailed security logs (for debugging)[m
[32m+[m[32mlogging.level.org.springframework.security=DEBUG[m
[32m+[m
[32m+[m[32mlogging.level.org.apache.maven=DEBUG[m
[32m+[m
[32m+[m
[32m+[m[32m# Database Configuration[m
[32m+[m[32mspring.datasource.url=jdbc:mysql://localhost:3306/user_service[m
[32m+[m[32mspring.datasource.username=root[m
[32m+[m[32mspring.datasource.password=abishek@1[m
[32m+[m[32mspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
[1mdiff --git a/UserService/src/test/java/com/HavenHub/user_service/UserServiceApplicationTests.java b/UserService/src/test/java/com/HavenHub/user_service/UserServiceApplicationTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..30dcf2b[m
[1m--- /dev/null[m
[1m+++ b/UserService/src/test/java/com/HavenHub/user_service/UserServiceApplicationTests.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.user_service;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32mclass UserServiceApplicationTests {[m
[32m+[m
[32m+[m	[32m@Test[m
[32m+[m	[32mvoid contextLoads() {[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/.gitattributes b/api-gatewayyy/.gitattributes[m
[1mnew file mode 100644[m
[1mindex 0000000..3b41682[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/.gitattributes[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32m/mvnw text eol=lf[m
[32m+[m[32m*.cmd text eol=crlf[m
[1mdiff --git a/api-gatewayyy/.gitignore b/api-gatewayyy/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..549e00a[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/.gitignore[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mHELP.md[m
[32m+[m[32mtarget/[m
[32m+[m[32m!.mvn/wrapper/maven-wrapper.jar[m
[32m+[m[32m!**/src/main/**/target/[m
[32m+[m[32m!**/src/test/**/target/[m
[32m+[m
[32m+[m[32m### STS ###[m
[32m+[m[32m.apt_generated[m
[32m+[m[32m.classpath[m
[32m+[m[32m.factorypath[m
[32m+[m[32m.project[m
[32m+[m[32m.settings[m
[32m+[m[32m.springBeans[m
[32m+[m[32m.sts4-cache[m
[32m+[m
[32m+[m[32m### IntelliJ IDEA ###[m
[32m+[m[32m.idea[m
[32m+[m[32m*.iws[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m
[32m+[m[32m### NetBeans ###[m
[32m+[m[32m/nbproject/private/[m
[32m+[m[32m/nbbuild/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/nbdist/[m
[32m+[m[32m/.nb-gradle/[m
[32m+[m[32mbuild/[m
[32m+[m[32m!**/src/main/**/build/[m
[32m+[m[32m!**/src/test/**/build/[m
[32m+[m
[32m+[m[32m### VS Code ###[m
[32m+[m[32m.vscode/[m
[1mdiff --git a/api-gatewayyy/.mvn/wrapper/maven-wrapper.properties b/api-gatewayyy/.mvn/wrapper/maven-wrapper.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..d58dfb7[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/.mvn/wrapper/maven-wrapper.properties[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#   http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32mwrapperVersion=3.3.2[m
[32m+[m[32mdistributionType=only-script[m
[32m+[m[32mdistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip[m
[1mdiff --git a/api-gatewayyy/mvnw b/api-gatewayyy/mvnw[m
[1mnew file mode 100644[m
[1mindex 0000000..19529dd[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/mvnw[m
[36m@@ -0,0 +1,259 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m# or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m# distributed with this work for additional information[m
[32m+[m[32m# regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m# to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m# "License"); you may not use this file except in compliance[m
[32m+[m[32m# with the License.  You may obtain a copy of the License at[m
[32m+[m[32m#[m
[32m+[m[32m#    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m#[m
[32m+[m[32m# Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m# software distributed under the License is distributed on an[m
[32m+[m[32m# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m# KIND, either express or implied.  See the License for the[m
[32m+[m[32m# specific language governing permissions and limitations[m
[32m+[m[32m# under the License.[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m[32m# Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m#[m
[32m+[m[32m# Optional ENV vars[m
[32m+[m[32m# -----------------[m
[32m+[m[32m#   JAVA_HOME - location of a JDK home dir, required when download maven via java source[m
[32m+[m[32m#   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32mset -euf[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != debug ] || set -x[m
[32m+[m
[32m+[m[32m# OS specific support.[m
[32m+[m[32mnative_path() { printf %s\\n "$1"; }[m
[32m+[m[32mcase "$(uname)" in[m
[32m+[m[32mCYGWIN* | MINGW*)[m
[32m+[m[32m  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"[m
[32m+[m[32m  native_path() { cygpath --path --windows "$1"; }[m
[32m+[m[32m  ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# set JAVACMD and JAVACCMD[m
[32m+[m[32mset_java_home() {[m
[32m+[m[32m  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched[m
[32m+[m[32m  if [ -n "${JAVA_HOME-}" ]; then[m
[32m+[m[32m    if [ -x "$JAVA_HOME/jre/sh/java" ]; then[m
[32m+[m[32m      # IBM's JDK on AIX uses strange locations for the executables[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/jre/sh/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/jre/sh/javac"[m
[32m+[m[32m    else[m
[32m+[m[32m      JAVACMD="$JAVA_HOME/bin/java"[m
[32m+[m[32m      JAVACCMD="$JAVA_HOME/bin/javac"[m
[32m+[m
[32m+[m[32m      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then[m
[32m+[m[32m        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2[m
[32m+[m[32m        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2[m
[32m+[m[32m        return 1[m
[32m+[m[32m      fi[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    JAVACMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v java[m
[32m+[m[32m    )" || :[m
[32m+[m[32m    JAVACCMD="$([m
[32m+[m[32m      'set' +e[m
[32m+[m[32m      'unset' -f command 2>/dev/null[m
[32m+[m[32m      'command' -v javac[m
[32m+[m[32m    )" || :[m
[32m+[m
[32m+[m[32m    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then[m
[32m+[m[32m      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2[m
[32m+[m[32m      return 1[m
[32m+[m[32m    fi[m
[32m+[m[32m  fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# hash string like Java String::hashCode[m
[32m+[m[32mhash_string() {[m
[32m+[m[32m  str="${1:-}" h=0[m
[32m+[m[32m  while [ -n "$str" ]; do[m
[32m+[m[32m    char="${str%"${str#?}"}"[m
[32m+[m[32m    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))[m
[32m+[m[32m    str="${str#?}"[m
[32m+[m[32m  done[m
[32m+[m[32m  printf %x\\n $h[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mverbose() { :; }[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }[m
[32m+[m
[32m+[m[32mdie() {[m
[32m+[m[32m  printf %s\\n "$1" >&2[m
[32m+[m[32m  exit 1[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtrim() {[m
[32m+[m[32m  # MWRAPPER-139:[m
[32m+[m[32m  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.[m
[32m+[m[32m  #   Needed for removing poorly interpreted newline sequences when running in more[m
[32m+[m[32m  #   exotic environments such as mingw bash on Windows.[m
[32m+[m[32m  printf "%s" "${1}" | tr -d '[:space:]'[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32mwhile IFS="=" read -r key value; do[m
[32m+[m[32m  case "${key-}" in[m
[32m+[m[32m  distributionUrl) distributionUrl=$(trim "${value-}") ;;[m
[32m+[m[32m  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;[m
[32m+[m[32m  esac[m
[32m+[m[32mdone <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m
[32m+[m[32mcase "${distributionUrl##*/}" in[m
[32m+[m[32mmaven-mvnd-*bin.*)[m
[32m+[m[32m  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/[m
[32m+[m[32m  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in[m
[32m+[m[32m  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;[m
[32m+[m[32m  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;[m
[32m+[m[32m  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;[m
[32m+[m[32m  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;[m
[32m+[m[32m  *)[m
[32m+[m[32m    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2[m
[32m+[m[32m    distributionPlatform=linux-amd64[m
[32m+[m[32m    ;;[m
[32m+[m[32m  esac[m
[32m+[m[32m  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"[m
[32m+[m[32m  ;;[m
[32m+[m[32mmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;[m
[32m+[m[32m*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32m[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"[m
[32m+[m[32mdistributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlName%.*}"[m
[32m+[m[32mdistributionUrlNameMain="${distributionUrlNameMain%-bin}"[m
[32m+[m[32mMAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"[m
[32m+[m[32mMAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"[m
[32m+[m
[32m+[m[32mexec_maven() {[m
[32m+[m[32m  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :[m
[32m+[m[32m  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif [ -d "$MAVEN_HOME" ]; then[m
[32m+[m[32m  verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  exec_maven "$@"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mcase "${distributionUrl-}" in[m
[32m+[m[32m*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;[m
[32m+[m[32m*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32mif TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then[m
[32m+[m[32m  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }[m
[32m+[m[32m  trap clean HUP INT TERM EXIT[m
[32m+[m[32melse[m
[32m+[m[32m  die "cannot create temp dir"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mmkdir -p -- "${MAVEN_HOME%/*}"[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mverbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mverbose "Downloading from: $distributionUrl"[m
[32m+[m[32mverbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m# select .zip or .tar.gz[m
[32m+[m[32mif ! command -v unzip >/dev/null; then[m
[32m+[m[32m  distributionUrl="${distributionUrl%.zip}.tar.gz"[m
[32m+[m[32m  distributionUrlName="${distributionUrl##*/}"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# verbose opt[m
[32m+[m[32m__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''[m
[32m+[m[32m[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v[m
[32m+[m
[32m+[m[32m# normalize http auth[m
[32m+[m[32mcase "${MVNW_PASSWORD:+has-password}" in[m
[32m+[m[32m'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mhas-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mif [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then[m
[32m+[m[32m  verbose "Found wget ... using wget"[m
[32m+[m[32m  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"[m
[32m+[m[32melif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then[m
[32m+[m[32m  verbose "Found curl ... using curl"[m
[32m+[m[32m  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"[m
[32m+[m[32melif set_java_home; then[m
[32m+[m[32m  verbose "Falling back to use Java to download"[m
[32m+[m[32m  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"[m
[32m+[m[32m  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m[32m  cat >"$javaSource" <<-END[m
[32m+[m	[32mpublic class Downloader extends java.net.Authenticator[m
[32m+[m	[32m{[m
[32m+[m	[32m  protected java.net.PasswordAuthentication getPasswordAuthentication()[m
[32m+[m	[32m  {[m
[32m+[m	[32m    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m  public static void main( String[] args ) throws Exception[m
[32m+[m	[32m  {[m
[32m+[m	[32m    setDefault( new Downloader() );[m
[32m+[m	[32m    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );[m
[32m+[m	[32m  }[m
[32m+[m	[32m}[m
[32m+[m	[32mEND[m
[32m+[m[32m  # For Cygwin/MinGW, switch paths to Windows format before running javac and java[m
[32m+[m[32m  verbose " - Compiling Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"[m
[32m+[m[32m  verbose " - Running Downloader.java ..."[m
[32m+[m[32m  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32mif [ -n "${distributionSha256Sum-}" ]; then[m
[32m+[m[32m  distributionSha256Result=false[m
[32m+[m[32m  if [ "$MVN_CMD" = mvnd.sh ]; then[m
[32m+[m[32m    echo "Checksum validation is not supported for maven-mvnd." >&2[m
[32m+[m[32m    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  elif command -v sha256sum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  elif command -v shasum >/dev/null; then[m
[32m+[m[32m    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then[m
[32m+[m[32m      distributionSha256Result=true[m
[32m+[m[32m    fi[m
[32m+[m[32m  else[m
[32m+[m[32m    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2[m
[32m+[m[32m    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32m  if [ $distributionSha256Result = false ]; then[m
[32m+[m[32m    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2[m
[32m+[m[32m    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2[m
[32m+[m[32m    exit 1[m
[32m+[m[32m  fi[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mif command -v unzip >/dev/null; then[m
[32m+[m[32m  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"[m
[32m+[m[32melse[m
[32m+[m[32m  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"[m
[32m+[m[32mfi[m
[32m+[m[32mprintf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"[m
[32m+[m[32mmv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"[m
[32m+[m
[32m+[m[32mclean || :[m
[32m+[m[32mexec_maven "$@"[m
[1mdiff --git a/api-gatewayyy/mvnw.cmd b/api-gatewayyy/mvnw.cmd[m
[1mnew file mode 100644[m
[1mindex 0000000..249bdf3[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/mvnw.cmd[m
[36m@@ -0,0 +1,149 @@[m
[32m+[m[32m<# : batch portion[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Licensed to the Apache Software Foundation (ASF) under one[m
[32m+[m[32m@REM or more contributor license agreements.  See the NOTICE file[m
[32m+[m[32m@REM distributed with this work for additional information[m
[32m+[m[32m@REM regarding copyright ownership.  The ASF licenses this file[m
[32m+[m[32m@REM to you under the Apache License, Version 2.0 (the[m
[32m+[m[32m@REM "License"); you may not use this file except in compliance[m
[32m+[m[32m@REM with the License.  You may obtain a copy of the License at[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM    http://www.apache.org/licenses/LICENSE-2.0[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Unless required by applicable law or agreed to in writing,[m
[32m+[m[32m@REM software distributed under the License is distributed on an[m
[32m+[m[32m@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY[m
[32m+[m[32m@REM KIND, either express or implied.  See the License for the[m
[32m+[m[32m@REM specific language governing permissions and limitations[m
[32m+[m[32m@REM under the License.[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m[32m@REM Apache Maven Wrapper startup batch script, version 3.3.2[m
[32m+[m[32m@REM[m
[32m+[m[32m@REM Optional ENV vars[m
[32m+[m[32m@REM   MVNW_REPOURL - repo url base for downloading maven distribution[m
[32m+[m[32m@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven[m
[32m+[m[32m@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output[m
[32m+[m[32m@REM ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)[m
[32m+[m[32m@SET __MVNW_CMD__=[m
[32m+[m[32m@SET __MVNW_ERROR__=[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%[m
[32m+[m[32m@SET PSModulePath=[m
[32m+[m[32m@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @([m
[32m+[m[32m  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)[m
[32m+[m[32m)[m
[32m+[m[32m@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%[m
[32m+[m[32m@SET __MVNW_PSMODULEP_SAVE=[m
[32m+[m[32m@SET __MVNW_ARG0_NAME__=[m
[32m+[m[32m@SET MVNW_USERNAME=[m
[32m+[m[32m@SET MVNW_PASSWORD=[m
[32m+[m[32m@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)[m
[32m+[m[32m@echo Cannot start maven from wrapper >&2 && exit /b 1[m
[32m+[m[32m@GOTO :EOF[m
[32m+[m[32m: end batch / begin powershell #>[m
[32m+[m
[32m+[m[32m$ErrorActionPreference = "Stop"[m
[32m+[m[32mif ($env:MVNW_VERBOSE -eq "true") {[m
[32m+[m[32m  $VerbosePreference = "Continue"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties[m
[32m+[m[32m$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl[m
[32m+[m[32mif (!$distributionUrl) {[m
[32m+[m[32m  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {[m
[32m+[m[32m  "maven-mvnd-*" {[m
[32m+[m[32m    $USE_MVND = $true[m
[32m+[m[32m    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"[m
[32m+[m[32m    $MVN_CMD = "mvnd.cmd"[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m  default {[m
[32m+[m[32m    $USE_MVND = $false[m
[32m+[m[32m    $MVN_CMD = $script -replace '^mvnw','mvn'[m
[32m+[m[32m    break[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# apply MVNW_REPOURL and calculate MAVEN_HOME[m
[32m+[m[32m# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>[m
[32m+[m[32mif ($env:MVNW_REPOURL) {[m
[32m+[m[32m  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }[m
[32m+[m[32m  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"[m
[32m+[m[32m}[m
[32m+[m[32m$distributionUrlName = $distributionUrl -replace '^.*/',''[m
[32m+[m[32m$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''[m
[32m+[m[32m$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32mif ($env:MAVEN_USER_HOME) {[m
[32m+[m[32m  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"[m
[32m+[m[32m}[m
[32m+[m[32m$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''[m
[32m+[m[32m$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"[m
[32m+[m
[32m+[m[32mif (Test-Path -Path "$MAVEN_HOME" -PathType Container) {[m
[32m+[m[32m  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"[m
[32m+[m[32m  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[32m+[m[32m  exit $?[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {[m
[32m+[m[32m  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# prepare tmp dir[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile[m
[32m+[m[32m$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"[m
[32m+[m[32m$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null[m
[32m+[m[32mtrap {[m
[32m+[m[32m  if ($TMP_DOWNLOAD_DIR.Exists) {[m
[32m+[m[32m    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mNew-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null[m
[32m+[m
[32m+[m[32m# Download and Install Apache Maven[m
[32m+[m[32mWrite-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."[m
[32m+[m[32mWrite-Verbose "Downloading from: $distributionUrl"[m
[32m+[m[32mWrite-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"[m
[32m+[m
[32m+[m[32m$webclient = New-Object System.Net.WebClient[m
[32m+[m[32mif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {[m
[32m+[m[32m  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)[m
[32m+[m[32m}[m
[32m+[m[32m[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12[m
[32m+[m[32m$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null[m
[32m+[m
[32m+[m[32m# If specified, validate the SHA-256 sum of the Maven distribution zip file[m
[32m+[m[32m$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum[m
[32m+[m[32mif ($distributionSha256Sum) {[m
[32m+[m[32m  if ($USE_MVND) {[m
[32m+[m[32m    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."[m
[32m+[m[32m  }[m
[32m+[m[32m  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash[m
[32m+[m[32m  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {[m
[32m+[m[32m    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# unzip and move[m
[32m+[m[32mExpand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null[m
[32m+[m[32mRename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null[m
[32m+[m[32mtry {[m
[32m+[m[32m  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null[m
[32m+[m[32m} catch {[m
[32m+[m[32m  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {[m
[32m+[m[32m    Write-Error "fail to move MAVEN_HOME"[m
[32m+[m[32m  }[m
[32m+[m[32m} finally {[m
[32m+[m[32m  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }[m
[32m+[m[32m  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mWrite-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"[m
[1mdiff --git a/api-gatewayyy/pom.xml b/api-gatewayyy/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..fdca699[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/pom.xml[m
[36m@@ -0,0 +1,112 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m		[32m xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m	[32m<modelVersion>4.0.0</modelVersion>[m
[32m+[m	[32m<parent>[m
[32m+[m		[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m		[32m<artifactId>spring-boot-starter-parent</artifactId>[m
[32m+[m		[32m<version>3.1.4</version>[m
[32m+[m	[32m</parent>[m
[32m+[m
[32m+[m	[32m<groupId>com.HavenHub</groupId>[m
[32m+[m	[32m<artifactId>api-gateway</artifactId>[m
[32m+[m	[32m<version>0.0.1-SNAPSHOT</version>[m
[32m+[m
[32m+[m	[32m<properties>[m
[32m+[m		[32m<java.version>17</java.version>[m
[32m+[m		[32m<spring-cloud.version>2022.0.4</spring-cloud.version>[m
[32m+[m	[32m</properties>[m
[32m+[m
[32m+[m	[32m<dependencies>[m
[32m+[m		[32m<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-gateway-mvc -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-gateway-mvc</artifactId>[m
[32m+[m			[32m<version>4.0.4</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m
[32m+[m		[32m<!-- Spring Web for servlet-based application -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-web</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Eureka Discovery Client -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Feign Support -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m			[32m<artifactId>spring-cloud-starter-openfeign</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Security -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-security</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-oauth2-client</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- JWT Dependencies -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-api</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-impl</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>io.jsonwebtoken</groupId>[m
[32m+[m			[32m<artifactId>jjwt-jackson</artifactId>[m
[32m+[m			[32m<version>0.12.5</version>[m
[32m+[m			[32m<scope>runtime</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Lombok -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.projectlombok</groupId>[m
[32m+[m			[32m<artifactId>lombok</artifactId>[m
[32m+[m			[32m<version>1.18.30</version>[m
[32m+[m			[32m<scope>provided</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m
[32m+[m		[32m<!-- Testing -->[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m			[32m<artifactId>spring-boot-starter-test</artifactId>[m
[32m+[m			[32m<scope>test</scope>[m
[32m+[m		[32m</dependency>[m
[32m+[m	[32m</dependencies>[m
[32m+[m
[32m+[m	[32m<dependencyManagement>[m
[32m+[m		[32m<dependencies>[m
[32m+[m			[32m<dependency>[m
[32m+[m				[32m<groupId>org.springframework.cloud</groupId>[m
[32m+[m				[32m<artifactId>spring-cloud-dependencies</artifactId>[m
[32m+[m				[32m<version>2022.0.4</version>[m
[32m+[m				[32m<type>pom</type>[m
[32m+[m				[32m<scope>import</scope>[m
[32m+[m			[32m</dependency>[m
[32m+[m		[32m</dependencies>[m
[32m+[m	[32m</dependencyManagement>[m
[32m+[m
[32m+[m	[32m<build>[m
[32m+[m		[32m<plugins>[m
[32m+[m			[32m<plugin>[m
[32m+[m				[32m<groupId>org.springframework.boot</groupId>[m
[32m+[m				[32m<artifactId>spring-boot-maven-plugin</artifactId>[m
[32m+[m			[32m</plugin>[m
[32m+[m		[32m</plugins>[m
[32m+[m	[32m</build>[m
[32m+[m[32m</project>[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/ApiGatewayApplication.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/ApiGatewayApplication.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b5c922b[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/ApiGatewayApplication.java[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway;[m
[32m+[m
[32m+[m[32mimport org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m
[32m+[m[32mimport org.springframework.cloud.openfeign.EnableFeignClients;[m
[32m+[m
[32m+[m[32m//package com.HavenHub.api_gateway;[m
[32m+[m[32m//[m
[32m+[m[32m//import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;[m
[32m+[m[32m//import org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration;[m
[32m+[m[32m//import org.springframework.boot.autoconfigure.SpringBootApplication;[m
[32m+[m[32m//import org.springframework.cloud.openfeign.EnableFeignClients;[m
[32m+[m[32m//[m
[32m+[m[32m//@SpringBootApplication([m
[32m+[m[32m//	exclude = {[m
[32m+[m[32m//		DataSourceAutoConfiguration.class,[m
[32m+[m[32m//		ReactiveOAuth2ClientAutoConfiguration.class[m
[32m+[m[32m//	}[m
[32m+[m[32m//)[m
[32m+[m[32m@SpringBootApplication[m
[32m+[m[32m@EnableFeignClients[m
[32m+[m[32mpublic class ApiGatewayApplication {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m		[32morg.springframework.boot.SpringApplication.run(ApiGatewayApplication.class, args);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/DTO/UserPrincipalDTO.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/DTO/UserPrincipalDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..540c7fb[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/DTO/UserPrincipalDTO.java[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.DTO;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.security.core.GrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.authority.SimpleGrantedAuthority;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m
[32m+[m
[32m+[m[32mpublic class UserPrincipalDTO implements UserDetails {[m
[32m+[m
[32m+[m[32m      private HotelUser user;[m
[32m+[m
[32m+[m[32m      public UserPrincipalDTO(HotelUser user) {[m
[32m+[m[32m            this.user=user;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public Collection<? extends GrantedAuthority> getAuthorities() {[m
[32m+[m[32m            return Collections.singleton(new SimpleGrantedAuthority(user.getType()));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getPassword() {[m
[32m+[m[32m            return user.getPassword();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public String getUsername() {[m
[32m+[m[32m            return user.getName();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isAccountNonLocked() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isCredentialsNonExpired() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public boolean isEnabled() {[m
[32m+[m[32m            return true;[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/BookingInterface.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/BookingInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5347fab[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/BookingInterface.java[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Booking;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@FeignClient("BOOKING-SERVICE")[m
[32m+[m[32mpublic interface BookingInterface {[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/booking/save")[m
[32m+[m[32m      ResponseEntity<String> saveBooking(@RequestBody Booking booking);[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/booking/getOne/{user_id}")[m
[32m+[m[32m      ResponseEntity<List<Booking>> getBookedRoomsByUser(@PathVariable("user_id") int userId);[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/booking/getAll/{hotel_id}/{check_in_date}")[m
[32m+[m[32m      ResponseEntity<List<Booking>> getAllRooms([m
[32m+[m[32m              @PathVariable("hotel_id") int hotelId,[m
[32m+[m[32m              @PathVariable("check_in_date") LocalDate date[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      @PutMapping("/api/v1/booking/cancel/{booking_id}")[m
[32m+[m[32m      ResponseEntity<String> updateCancelled(@PathVariable("booking_id") int bookingId);[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/HotelInterface.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/HotelInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..858a7b1[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/HotelInterface.java[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Hotel;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@FeignClient("HOTEL-SERVICE")[m
[32m+[m[32mpublic interface HotelInterface {[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/hotel/save")[m
[32m+[m[32m      ResponseEntity<String> addHotel([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("ratings") float ratings,[m
[32m+[m[32m              @RequestParam("address") String address,[m
[32m+[m[32m              @RequestParam("features") String features,[m
[32m+[m[32m              @RequestParam("city") String city,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("location") String location,[m
[32m+[m[32m              @RequestParam("photo") String photoPath,[m
[32m+[m[32m              @RequestParam("price") int price[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/hotel/getAllHotels")[m
[32m+[m[32m      ResponseEntity<List<Hotel>> getAllHotels();[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/hotel/getOne/{id}")[m
[32m+[m[32m      ResponseEntity<Hotel> getHotelById(@PathVariable("id") int id);[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/hotel/getOneHotel/{city}")[m
[32m+[m[32m      ResponseEntity<List<Hotel>> getHotelsByCity(@PathVariable("city") String city);[m
[32m+[m
[32m+[m[32m      @DeleteMapping("/api/v1/hotel/deleteHotel/{id}")[m
[32m+[m[32m      ResponseEntity<String> deleteHotel(@PathVariable("id") int id);[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/RoomsInterface.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/RoomsInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8821a69[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/RoomsInterface.java[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Rooms;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@FeignClient("ROOMS-SERVICE")[m
[32m+[m[32mpublic interface RoomsInterface {[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/rooms/save")[m
[32m+[m[32m      ResponseEntity<String> addRoom([m
[32m+[m[32m              @RequestParam("hotel_id") int hotelId,[m
[32m+[m[32m              @RequestParam("room_number") int roomNumber,[m
[32m+[m[32m              @RequestParam("room_type") String roomType,[m
[32m+[m[32m              @RequestParam("price") int price,[m
[32m+[m[32m              @RequestParam("is_available") String isAvailable,[m
[32m+[m[32m              @RequestParam("room_photo") String photoPath[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/rooms/getAllRooms/{hotel_id}")[m
[32m+[m[32m      ResponseEntity<List<Rooms>> getAllRooms(@PathVariable("hotel_id") int hotelId);[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/UserInterface.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/UserInterface.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2dfdaf8[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/Feign/UserInterface.java[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.Feign;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32mimport org.springframework.cloud.openfeign.FeignClient;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@FeignClient("USER-SERVICE")[m
[32m+[m[32mpublic interface UserInterface {[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/user/getByEmail/{email}")[m
[32m+[m[32m      ResponseEntity<HotelUser> getByEmail(@PathVariable("email") String email);[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/user/getByName/{name}")[m
[32m+[m[32m      ResponseEntity<HotelUser> getByName(@PathVariable("name") String name);[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/user/save")[m
[32m+[m[32m      ResponseEntity<String> saveUser([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) String photoPath);[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/user/saveAdmin")[m
[32m+[m[32m      ResponseEntity<String> saveAdmin([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) String photoPath);[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/user/registerUser")[m
[32m+[m[32m      ResponseEntity<String> registerUser(@RequestBody HotelUser user);[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/user/registerAdmin")[m
[32m+[m[32m      ResponseEntity<String> registerAdmin(@RequestBody HotelUser user);[m
[32m+[m
[32m+[m[32m      @PostMapping("/api/v1/user/login")[m
[32m+[m[32m      ResponseEntity<Map<String, String>> login(@RequestBody HotelUser user);[m
[32m+[m
[32m+[m[32m      @GetMapping("/api/v1/user/getOne/{id}")[m
[32m+[m[32m      ResponseEntity<HotelUser> getOne(@PathVariable("id") int id);[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/JWTFilter.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/JWTFilter.java[m
[1mnew file mode 100644[m
[1mindex 0000000..1a3c332[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/JWTFilter.java[m
[36m@@ -0,0 +1,79 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.service.JWTService;[m
[32m+[m[32mimport com.HavenHub.api_gateway.service.MyUserDetailsService;[m
[32m+[m[32mimport jakarta.servlet.FilterChain;[m
[32m+[m[32mimport jakarta.servlet.ServletException;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletRequest;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.ApplicationContext;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.context.SecurityContextHolder;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;[m
[32m+[m[32mimport org.springframework.stereotype.Component;[m
[32m+[m[32mimport org.springframework.web.filter.OncePerRequestFilter;[m
[32m+[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m
[32m+[m
[32m+[m[32m@Component[m
[32m+[m[32mpublic class JWTFilter extends OncePerRequestFilter {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      ApplicationContext context;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      MyUserDetailsService myUserDetailsService;[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)[m
[32m+[m[32m              throws ServletException, IOException {[m
[32m+[m
[32m+[m[32m            String authHeader = request.getHeader("Authorization");[m
[32m+[m[32m            String token = null;[m
[32m+[m[32m            String username = null;[m
[32m+[m
[32m+[m[32m            // Validate the Authorization header[m
[32m+[m[32m            if (authHeader == null || !authHeader.startsWith("Bearer ")) {[m
[32m+[m[32m                  filterChain.doFilter(request, response);[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Extract the token[m
[32m+[m[32m            token = authHeader.substring(7);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                  // Extract username from token[m
[32m+[m
[32m+[m[32m                  username = jwtService.extractUserName(token);[m
[32m+[m[32m                  logger.info("Extracted username: " + username);[m
[32m+[m[32m                  if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {[m
[32m+[m[32m                        // Load user details[m
[32m+[m[32m                        UserDetails userDetails = myUserDetailsService.loadUserByUsername(username);[m
[32m+[m[32m                        logger.info("Loaded UserDetails: " + userDetails.getUsername());[m
[32m+[m[32m                        // Validate the token[m
[32m+[m[32m                        if (jwtService.validateTokens(token, userDetails)) {[m
[32m+[m[32m                              UsernamePasswordAuthenticationToken authenticationToken =[m
[32m+[m[32m                                      new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());[m
[32m+[m[32m                              authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));[m
[32m+[m[32m                              SecurityContextHolder.getContext().setAuthentication(authenticationToken);[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                              logger.warn("Invalid JWT token for user: " + username);[m
[32m+[m[32m                        }[m
[32m+[m[32m                  }[m
[32m+[m[32m            } catch (Exception ex) {[m
[32m+[m[32m                  logger.error("Error during JWT validation: ", ex);[m
[32m+[m[32m                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                  response.getWriter().write("Unauthorized");[m
[32m+[m[32m                  return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            filterChain.doFilter(request, response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/SecurityConfig.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/SecurityConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..900db09[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/SecurityConfig.java[m
[36m@@ -0,0 +1,271 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.configuration;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.api_gateway.service.JWTService;[m
[32m+[m[32mimport com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.context.annotation.Import;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32mimport org.springframework.security.config.Customizer;[m
[32m+[m[32mimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32mimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32mimport org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32mimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32mimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@EnableWebSecurity[m
[32m+[m[32m@Import({org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.class})[m
[32m+[m[32mpublic class SecurityConfig {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      UserDetailsService userDetailsService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTFilter jwtFilter;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwtService;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      UserInterface ur;[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m            return http.csrf(AbstractHttpConfigurer::disable)[m
[32m+[m[32m                    .cors(Customizer.withDefaults())[m
[32m+[m[32m                    .authorizeRequests(request -> request[m
[32m+[m[32m                            .requestMatchers("/api/v1/user/save", "/api/v1/user/login", "/oauth2/**").permitAll()[m
[32m+[m[32m                            .anyRequest().authenticated())[m
[32m+[m[32m                    .oauth2Login(oauth2 -> oauth2[m
[32m+[m[32m                            .successHandler((request, response, authentication) -> {[m
[32m+[m[32m                                  // Cast authentication to OAuth2AuthenticationToken to extract details[m
[32m+[m[32m                                  OAuth2AuthenticationToken oauthToken = (OAuth2AuthenticationToken) authentication;[m
[32m+[m[32m                                  Map<String, Object> attributes = oauthToken.getPrincipal().getAttributes();[m
[32m+[m
[32m+[m[32m                                  // Extract user details[m
[32m+[m[32m                                  String email = (String) attributes.get("email");[m
[32m+[m[32m                                  String name = (String) attributes.get("name");[m
[32m+[m[32m                                  String pictureUrl = (String) attributes.get("picture");[m
[32m+[m[32m                                  String token = jwtService.generateToken(name);[m
[32m+[m
[32m+[m[32m                                  // Prepare the response map[m
[32m+[m[32m                                  Map<String, Object> responseBody = new HashMap<>();[m
[32m+[m[32m                                  responseBody.put("token", token);[m
[32m+[m[32m                                  responseBody.put("role", "OAuth");[m
[32m+[m[32m                                  responseBody.put("name", name);[m
[32m+[m[32m                                  responseBody.put("email", email);[m
[32m+[m[32m                                  responseBody.put("photo", pictureUrl);[m
[32m+[m[32m                                  HotelUser user = ur.getByEmail(email).getBody();[m
[32m+[m[32m                                  if (user != null) {[m
[32m+[m[32m                                        responseBody.put("role", "user");[m
[32m+[m[32m                                        responseBody.put("userId", String.valueOf(user.getId()));[m
[32m+[m[32m                                        responseBody.put("token", jwtService.generateToken(user.getName()));[m
[32m+[m[32m                                        responseBody.put("name", user.getName());[m
[32m+[m[32m                                  }[m
[32m+[m[32m                                  // Write the map as JSON response[m
[32m+[m[32m                                  response.setContentType("application/json");[m
[32m+[m[32m                                  response.getWriter().write(new ObjectMapper().writeValueAsString(responseBody));[m
[32m+[m[32m                                  response.setStatus(HttpServletResponse.SC_OK);[m
[32m+[m[32m                            })[m
[32m+[m[32m                            .failureHandler((request, response, exception) -> {[m
[32m+[m[32m                                  response.setContentType("application/json");[m
[32m+[m[32m                                  response.getWriter().write("{\"error\": \"Login failed!\"}");[m
[32m+[m[32m                                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m                            }))[m
[32m+[m[32m                    .httpBasic(Customizer.withDefaults())[m
[32m+[m[32m                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))[m
[32m+[m[32m                    .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)[m
[32m+[m[32m                    .build();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public PasswordEncoder passwordEncoder() {[m
[32m+[m[32m            return new BCryptPasswordEncoder();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public AuthenticationProvider authenticationProvider() {[m
[32m+[m[32m            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();[m
[32m+[m[32m            provider.setPasswordEncoder(new BCryptPasswordEncoder());[m
[32m+[m[32m            provider.setUserDetailsService(userDetailsService);[m
[32m+[m[32m            return provider;[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @Bean[m
[32m+[m[32m      public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {[m
[32m+[m[32m            return config.getAuthenticationManager();[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m//[m
[32m+[m[32m//package com.HavenHub.api_gateway.configuration;[m
[32m+[m[32m//[m
[32m+[m[32m//import com.HavenHub.api_gateway.Feign.UserInterface;[m
[32m+[m[32m//import com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32m//import com.HavenHub.api_gateway.service.JWTService;[m
[32m+[m[32m//import com.fasterxml.jackson.databind.ObjectMapper;[m
[32m+[m[32m//import jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32m//import org.apache.commons.logging.Log;[m
[32m+[m[32m//import org.apache.commons.logging.LogFactory;[m
[32m+[m[32m//import org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32m//import org.springframework.beans.factory.annotation.Value;[m
[32m+[m[32m//import org.springframework.context.annotation.Bean;[m
[32m+[m[32m//import org.springframework.context.annotation.Configuration;[m
[32m+[m[32m//import org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32m//import org.springframework.security.authentication.AuthenticationProvider;[m
[32m+[m[32m//import org.springframework.security.authentication.dao.DaoAuthenticationProvider;[m
[32m+[m[32m//import org.springframework.security.config.Customizer;[m
[32m+[m[32m//import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;[m
[32m+[m[32m//import org.springframework.security.config.annotation.web.builders.HttpSecurity;[m
[32m+[m[32m//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;[m
[32m+[m[32m//import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;[m
[32m+[m[32m//import org.springframework.security.config.http.SessionCreationPolicy;[m
[32m+[m[32m//import org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32m//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;[m
[32m+[m[32m//import org.springframework.security.crypto.password.PasswordEncoder;[m
[32m+[m[32m//import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;[m
[32m+[m[32m//import org.springframework.security.oauth2.client.registration.ClientRegistration;[m
[32m+[m[32m//import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;[m
[32m+[m[32m//import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;[m
[32m+[m[32m//import org.springframework.security.oauth2.core.AuthorizationGrantType;[m
[32m+[m[32m//import org.springframework.security.web.SecurityFilterChain;[m
[32m+[m[32m//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;[m
[32m+[m[32m//[m
[32m+[m[32m//import java.util.HashMap;[m
[32m+[m[32m//import java.util.Map;[m
[32m+[m[32m//[m
[32m+[m[32m//@Configuration[m
[32m+[m[32m//@EnableWebSecurity[m
[32m+[m[32m//public class SecurityConfig {[m
[32m+[m[32m//[m
[32m+[m[32m//      @Autowired[m
[32m+[m[32m//      private JWTFilter jwtFilter;[m
[32m+[m[32m//[m
[32m+[m[32m//      @Autowired[m
[32m+[m[32m//      private JWTService jwtService;[m
[32m+[m[32m//[m
[32m+[m[32m//      @Autowired[m
[32m+[m[32m//      private UserInterface userService;[m
[32m+[m[32m//[m
[32m+[m[32m//      // Load configuration for Google OAuth[m
[32m+[m[32m//      @Value("${spring.security.oauth2.client.registration.google.client-id}")[m
[32m+[m[32m//      private String googleClientId;[m
[32m+[m[32m//[m
[32m+[m[32m//      @Value("${spring.security.oauth2.client.registration.google.client-secret}")[m
[32m+[m[32m//      private String googleClientSecret;[m
[32m+[m[32m//[m
[32m+[m[32m//      @Value("${spring.security.oauth2.client.registration.google.redirect-uri}")[m
[32m+[m[32m//      private String googleRedirectUri;[m
[32m+[m[32m//[m
[32m+[m[32m//      @Autowired[m
[32m+[m[32m//      private UserDetailsService userDetailsService;[m
[32m+[m[32m//[m
[32m+[m[32m//      protected final Log logger = LogFactory.getLog(getClass());[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public ClientRegistrationRepository clientRegistrationRepository() {[m
[32m+[m[32m//            return new InMemoryClientRegistrationRepository(googleClientRegistration());[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private ClientRegistration googleClientRegistration() {[m
[32m+[m[32m//            return ClientRegistration.withRegistrationId("google")[m
[32m+[m[32m//                    .clientId(googleClientId)[m
[32m+[m[32m//                    .clientSecret(googleClientSecret)[m
[32m+[m[32m//                    .redirectUri(googleRedirectUri)[m
[32m+[m[32m//                    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE) // Specify the grant type[m
[32m+[m[32m//                    .scope("openid", "profile", "email")[m
[32m+[m[32m//                    .authorizationUri("https://accounts.google.com/o/oauth2/auth")[m
[32m+[m[32m//                    .tokenUri("https://oauth2.googleapis.com/token")[m
[32m+[m[32m//                    .userInfoUri("https://www.googleapis.com/oauth2/v3/userinfo")[m
[32m+[m[32m//                    .userNameAttributeName("sub") // This is important for mapping user info[m
[32m+[m[32m//                    .clientName("Google")[m
[32m+[m[32m//                    .build();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {[m
[32m+[m[32m//            return http.csrf(AbstractHttpConfigurer::disable)[m
[32m+[m[32m//                    .cors(Customizer.withDefaults())[m
[32m+[m[32m//                    .authorizeHttpRequests(auth -> auth[m
[32m+[m[32m//                            .requestMatchers("/api/v1/user/save", "/api/v1/user/login", "/oauth2/**").permitAll()[m
[32m+[m[32m//                            .anyRequest().authenticated()[m
[32m+[m[32m//                    )[m
[32m+[m[32m//                    .oauth2Login(oauth2 -> oauth2[m
[32m+[m[32m//                            .successHandler((request, response, authentication) -> {[m
[32m+[m[32m//                                  logger.info("OAuth login is Successful");[m
[32m+[m[32m//                                  OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) authentication;[m
[32m+[m[32m//                                  Map<String, Object> attributes = token.getPrincipal().getAttributes();[m
[32m+[m[32m//                                  String email = (String) attributes.get("email");[m
[32m+[m[32m//                                  String name = (String) attributes.get("name");[m
[32m+[m[32m//                                  String pictureUrl = (String) attributes.get("picture");[m
[32m+[m[32m//                                  String jwtToken = jwtService.generateToken(name);[m
[32m+[m[32m//                                  Map<String, Object> responseBody = new HashMap<>();[m
[32m+[m[32m//                                  responseBody.put("token", jwtToken);[m
[32m+[m[32m//                                  responseBody.put("role", "OAuth");[m
[32m+[m[32m//                                  responseBody.put("name", name);[m
[32m+[m[32m//                                  responseBody.put("email", email);[m
[32m+[m[32m//                                  responseBody.put("photo", pictureUrl);[m
[32m+[m[32m//[m
[32m+[m[32m//                                  try {[m
[32m+[m[32m//                                        HotelUser user = userService.getByEmail(email).getBody();[m
[32m+[m[32m//                                        if (user != null) {[m
[32m+[m[32m//                                              responseBody.put("role", "user");[m
[32m+[m[32m//                                              responseBody.put("userId", String.valueOf(user.getId()));[m
[32m+[m[32m//                                              responseBody.put("token", jwtService.generateToken(user.getName()));[m
[32m+[m[32m//                                              responseBody.put("name", user.getName());[m
[32m+[m[32m//                                        }[m
[32m+[m[32m//                                  } catch (Exception e) {[m
[32m+[m[32m//                                        responseBody.put("error", "User service unavailable");[m
[32m+[m[32m//                                  }[m
[32m+[m[32m//[m
[32m+[m[32m//                                  response.setContentType("application/json");[m
[32m+[m[32m//                                  response.getWriter().write(new ObjectMapper().writeValueAsString(responseBody));[m
[32m+[m[32m//                                  response.setStatus(HttpServletResponse.SC_OK);[m
[32m+[m[32m//                            })[m
[32m+[m[32m//                            .failureHandler((request, response, exception) -> {[m
[32m+[m[32m//                                  response.setContentType("application/json");[m
[32m+[m[32m//                                  response.getWriter().write("{\"error\": \"Login failed!\"}");[m
[32m+[m[32m//                                  response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);[m
[32m+[m[32m//                            })[m
[32m+[m[32m//                    )[m
[32m+[m[32m//                    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))[m
[32m+[m[32m//                    .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)[m
[32m+[m[32m//                    .build();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public PasswordEncoder passwordEncoder() {[m
[32m+[m[32m//            return new BCryptPasswordEncoder();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public AuthenticationProvider authenticationProvider() {[m
[32m+[m[32m//            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();[m
[32m+[m[32m//            provider.setPasswordEncoder(passwordEncoder());[m
[32m+[m[32m//            provider.setUserDetailsService(userDetailsService);[m
[32m+[m[32m//            return provider;[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      @Bean[m
[32m+[m[32m//      public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {[m
[32m+[m[32m//            return authenticationConfiguration.getAuthenticationManager();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/WebConfig.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/WebConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..69c74c0[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/configuration/WebConfig.java[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.configuration;[m
[32m+[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32m//import org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32m//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m[32m//[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32mclass WebConfig {[m
[32m+[m
[32m+[m[32m//      @Override[m
[32m+[m[32m//      public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m//            registry.addMapping("/api/v1/**") // Apply to all paths[m
[32m+[m[32m//                    .allowedOrigins("http://localhost:3000") // Allow frontend origin[m
[32m+[m[32m//                    .allowedMethods("GET", "POST", "PUT", "DELETE", "PATCH") // Allowed HTTP methods[m
[32m+[m[32m//                    .allowedHeaders("*"); // Allow all headers[m
[32m+[m[32m//      }[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/BookingController.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/BookingController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..7ac6a99[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/BookingController.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.BookingInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Booking;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32m;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/booking")[m
[32m+[m[32mpublic class BookingController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      BookingInterface bs;[m
[32m+[m
[32m+[m[32m      @PostMapping(path="/save")[m
[32m+[m[32m      public ResponseEntity<String> saveBooking(@RequestBody Booking booking){[m
[32m+[m[32m            return bs.saveBooking(booking);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "/getOne/{user_id}")[m
[32m+[m[32m      public ResponseEntity<List<Booking>> getBookedRoomsByUser(@PathVariable("user_id") int user_id){[m
[32m+[m[32m            return bs.getBookedRoomsByUser(user_id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "getAll/{hotel_id}/{check_in_date}")[m
[32m+[m[32m      public ResponseEntity<List<Booking>> getAllRooms(@PathVariable("hotel_id") int hotel_id,[m
[32m+[m[32m                                                       @PathVariable("check_in_date") LocalDate date){[m
[32m+[m[32m            return bs.getAllRooms(hotel_id,date);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @PutMapping(path = "/cancel/{booking_id}")[m
[32m+[m[32m      public ResponseEntity<String>  updateCancelled(@PathVariable("booking_id") int booking_id){[m
[32m+[m[32m            return updateCancelled(booking_id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelController.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c73d9f5[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelController.java[m
[36m@@ -0,0 +1,107 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.HotelInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Hotel;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/hotel")[m
[32m+[m[32mpublic class HotelController {[m
[32m+[m
[32m+[m
[32m+[m[32m//      @PostMapping(path = "/save", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)[m
[32m+[m[32m//      public ResponseEntity<String>  saveHotel([m
[32m+[m[32m//              @RequestParam("name") String name,[m
[32m+[m[32m//              @RequestParam("ratings") float ratings,[m
[32m+[m[32m//              @RequestParam("address") String address,[m
[32m+[m[32m//              @RequestParam("features") String features,[m
[32m+[m[32m//              @RequestParam("city") String city,[m
[32m+[m[32m//              @RequestParam("mobile") String mobile,[m
[32m+[m[32m//              @RequestParam("hotel_photo") MultipartFile hotelPhoto) throws IOException {[m
[32m+[m[32m//                  // Convert MultipartFile to byte[][m
[32m+[m[32m//                  byte[] photoBytes = hotelPhoto.getBytes();[m
[32m+[m[32m//[m
[32m+[m[32m//                  // Create HotelDTO manually[m
[32m+[m[32m//                  HotelDTO hotel = new HotelDTO();[m
[32m+[m[32m//                  hotel.setName(name);[m
[32m+[m[32m//                  hotel.setRatings(ratings);[m
[32m+[m[32m//                  hotel.setAddress(address);[m
[32m+[m[32m//                  hotel.setFeatures(features);[m
[32m+[m[32m//                  hotel.setCity(city);[m
[32m+[m[32m//                  hotel.setMobile(mobile);[m
[32m+[m[32m//                  hotel.setHotel_photo(photoBytes);[m
[32m+[m[32m//[m
[32m+[m[32m//                  // Save using the service layer[m
[32m+[m[32m//                  return new ResponseEntity<>(hs.addHotel(hotel),HttpStatus.OK);[m
[32m+[m[32m//[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      HotelInterface hs;[m
[32m+[m
[32m+[m[32m      @PostMapping("/save")[m
[32m+[m[32m      public ResponseEntity<String> addHotel([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("ratings") float ratings,[m
[32m+[m[32m              @RequestParam("address") String address,[m
[32m+[m[32m              @RequestParam("features") String features,[m
[32m+[m[32m              @RequestParam("city") String city,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("location") String location,[m
[32m+[m[32m              @RequestParam("photo") MultipartFile photo,[m
[32m+[m[32m              @RequestParam("price") int price) {[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            String uploadDir = "src/main/resources/images/hotel";[m
[32m+[m[32m            File uploadFolder = new File(uploadDir);[m
[32m+[m[32m            if (!uploadFolder.exists()) {[m
[32m+[m[32m                  uploadFolder.mkdirs(); // Create directory if it doesn't exist[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m            File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m            try {[m
[32m+[m[32m                  photo.transferTo(photoFile); // Save the file[m
[32m+[m[32m            } catch (IOException e) {[m
[32m+[m[32m                  return new ResponseEntity<>("Failed to upload photo", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Save hotel details to the database[m
[32m+[m[32m            String photoPath = "/images/hotel" + photoFileName; // Relative path to store in the database[m
[32m+[m[32m            return hs.addHotel(name, ratings, address, features, city, mobile, location, photoPath, price);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "/getAllHotels")[m
[32m+[m[32m      public ResponseEntity<List<Hotel>> getAllHotels() {[m
[32m+[m[32m            return hs.getAllHotels();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path = "/getOne/{id}")[m
[32m+[m[32m      public ResponseEntity<Hotel> getHotel(@PathVariable("id") int id) {[m
[32m+[m[32m            return getHotel(id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("getOneHotel/{city}")[m
[32m+[m[32m      public ResponseEntity<List<Hotel>> getHotelByCity(@PathVariable("city") String city) {[m
[32m+[m[32m            return getHotelByCity(city);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @DeleteMapping("deleteHotel/{id}")[m
[32m+[m[32m      public ResponseEntity<String> deleteHotel(@PathVariable("id") int id) {[m
[32m+[m[32m            return deleteHotel(id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelUserController.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelUserController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..129d786[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/HotelUserController.java[m
[36m@@ -0,0 +1,142 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32mimport com.HavenHub.api_gateway.service.JWTService;[m
[32m+[m[32mimport jakarta.servlet.http.HttpServletResponse;[m
[32m+[m[32mimport jakarta.servlet.http.HttpSession;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.security.authentication.AuthenticationManager;[m
[32m+[m[32mimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;[m
[32m+[m[32mimport org.springframework.security.core.Authentication;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.Objects;[m
[32m+[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/user")[m
[32m+[m[32mpublic class HotelUserController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      UserInterface ur;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      JWTService jwt;[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      AuthenticationManager authenticationManager;[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/registerUser")[m
[32m+[m[32m      public ResponseEntity<String> saveUser(@RequestBody HotelUser user) {[m
[32m+[m[32m            return ur.registerUser(user);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/save")[m
[32m+[m[32m      public ResponseEntity<String> saveUser([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) MultipartFile photo) {[m
[32m+[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            String photoPath = null;[m
[32m+[m[32m            if (photo != null) {[m
[32m+[m[32m                  String uploadDir = "src/main/resources/images/user";[m
[32m+[m[32m                  File uploadFolder = new File(uploadDir);[m
[32m+[m[32m                  if (!uploadFolder.exists()) {[m
[32m+[m[32m                        uploadFolder.mkdirs();[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m                  File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m                  try {[m
[32m+[m[32m                        photo.transferTo(photoFile);[m
[32m+[m[32m                        photoPath = "/images/user" + photoFileName; // Relative path to store in DB[m
[32m+[m[32m                  } catch (IOException e) {[m
[32m+[m[32m                        return new ResponseEntity<>("error", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m                  }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            return ur.saveUser(name, email, password, mobile, type, photoPath);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping(path = "/saveAdmin")[m
[32m+[m[32m      public ResponseEntity<String> saveAdmin([m
[32m+[m[32m              @RequestParam("name") String name,[m
[32m+[m[32m              @RequestParam("email") String email,[m
[32m+[m[32m              @RequestParam("password") String password,[m
[32m+[m[32m              @RequestParam("mobile") String mobile,[m
[32m+[m[32m              @RequestParam("type") String type,[m
[32m+[m[32m              @RequestParam(value = "photo", required = false) MultipartFile photo) {[m
[32m+[m
[32m+[m[32m            // Save the photo to the images folder[m
[32m+[m[32m            String photoPath = null;[m
[32m+[m[32m            if (photo != null) {[m
[32m+[m[32m                  String uploadDir = "src/main/resources/images/admin";[m
[32m+[m[32m                  File uploadFolder = new File(uploadDir);[m
[32m+[m[32m                  if (!uploadFolder.exists()) {[m
[32m+[m[32m                        uploadFolder.mkdirs();[m
[32m+[m[32m                  }[m
[32m+[m
[32m+[m[32m                  String photoFileName = System.currentTimeMillis() + "_" + photo.getOriginalFilename();[m
[32m+[m[32m                  File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m                  try {[m
[32m+[m[32m                        photo.transferTo(photoFile);[m
[32m+[m[32m                        photoPath = "/images/admin" + photoFileName; // Relative path to store in DB[m
[32m+[m[32m                  } catch (IOException e) {[m
[32m+[m[32m                        return new ResponseEntity<>("error", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m                  }[m
[32m+[m[32m            }[m
[32m+[m[32m            return ur.saveAdmin(name, email, password, mobile, type, photoPath);[m
[32m+[m
[32m+[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      @PostMapping("/login")[m
[32m+[m[32m      public ResponseEntity<Map<String, String>> login(@RequestBody HotelUser user, HttpServletResponse httpServletResponse) {[m
[32m+[m[32m            Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken([m
[32m+[m[32m                    user.getEmail(), user.getPassword()));//IT CALLS AUTHENTICATION MANAGER THEN THE[m
[32m+[m[32m            // AUTHENTICATION MANAGER CALLS THE AUTHENTICATION PROVIDER[m
[32m+[m[32m            Map<String, String> response = new HashMap<>();[m
[32m+[m[32m            HotelUser u=null;[m
[32m+[m[32m            if (authentication.isAuthenticated()) {[m
[32m+[m[32m                 u = ur.getByEmail(user.getEmail()).getBody();[m
[32m+[m[32m                  if (u == null) {[m
[32m+[m[32m                        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);[m
[32m+[m[32m                  }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            response.put("token", jwt.generateToken(u.getName()));[m
[32m+[m[32m            response.put("role", u.getType());[m
[32m+[m[32m            response.put("userId", String.valueOf(u.getId()));[m
[32m+[m[32m            response.put("name", u.getName());[m
[32m+[m[32m            response.put("photo", u.getPhoto());[m
[32m+[m
[32m+[m[32m            return ResponseEntity.ok(response);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping("/getOne/{id}")[m
[32m+[m[32m      public ResponseEntity<HotelUser> getOne(@PathVariable("id") int id) {[m
[32m+[m[32m            return ur.getOne(id);[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/RoomsController.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/RoomsController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d958cfb[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/controller/RoomsController.java[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.controller;[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.RoomsInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.Rooms;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.multipart.MultipartFile;[m
[32m+[m
[32m+[m
[32m+[m[32mimport java.io.File;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m@RestController[m
[32m+[m[32m@CrossOrigin(origins = "http://localhost:3000")[m
[32m+[m[32m@RequestMapping("api/v1/rooms")[m
[32m+[m[32mpublic class RoomsController {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      RoomsInterface rs;[m
[32m+[m
[32m+[m[32m//[m
[32m+[m[32m//      @PostMapping(path = "/save")[m
[32m+[m[32m//      public String saveRooms(@RequestBody RoomsDTO rooms){[m
[32m+[m[32m//            return rs.addRooms(rooms);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m[32m//      @PostMapping(path = "/save", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)[m
[32m+[m[32m//      public ResponseEntity<String>  saveRooms([m
[32m+[m[32m//              @RequestParam("hotel_id") int hotelId,[m
[32m+[m[32m//              @RequestParam("room_number") int roomNumber,[m
[32m+[m[32m//              @RequestParam("room_type") String roomType,[m
[32m+[m[32m//              @RequestParam("price") int price,[m
[32m+[m[32m//              @RequestParam("is_available") String isAvailable,[m
[32m+[m[32m//              @RequestParam("room_photo") MultipartFile roomPhoto) throws IOException {[m
[32m+[m[32m//                  // Convert MultipartFile to byte[][m
[32m+[m[32m//                  byte[] photoBytes = roomPhoto.getBytes();[m
[32m+[m[32m//[m
[32m+[m[32m//                  // Create Rooms entity and save[m
[32m+[m[32m//                  RoomsDTO room = new RoomsDTO(hotelId, roomNumber, roomType, price, isAvailable, photoBytes);[m
[32m+[m[32m//                  return new ResponseEntity<>(rs.addRooms(room),HttpStatus.OK);[m
[32m+[m[32m//      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @PostMapping("/save")[m
[32m+[m[32m      public ResponseEntity<String> addRoom([m
[32m+[m[32m              @RequestParam("hotel_id") int hotelId,[m
[32m+[m[32m              @RequestParam("room_number") int roomNumber,[m
[32m+[m[32m              @RequestParam("room_type") String roomType,[m
[32m+[m[32m              @RequestParam("price") int price,[m
[32m+[m[32m              @RequestParam("is_available") String isAvailable,[m
[32m+[m[32m              @RequestParam("room_photo") MultipartFile roomPhoto) {[m
[32m+[m
[32m+[m[32m            // Save the room photo in the images/rooms folder[m
[32m+[m[32m            String uploadDir = "src/main/resources/images/rooms/";[m
[32m+[m[32m            File uploadFolder = new File(uploadDir);[m
[32m+[m[32m            if (!uploadFolder.exists()) {[m
[32m+[m[32m                  uploadFolder.mkdirs(); // Create directory if it doesn't exist[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            String photoFileName = System.currentTimeMillis() + "_" + roomPhoto.getOriginalFilename();[m
[32m+[m[32m            File photoFile = new File(uploadDir + photoFileName);[m
[32m+[m[32m            try {[m
[32m+[m[32m                  roomPhoto.transferTo(photoFile); // Save the file[m
[32m+[m[32m            } catch (IOException e) {[m
[32m+[m[32m                  return new ResponseEntity<>("Failed to upload room photo", HttpStatus.INTERNAL_SERVER_ERROR);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Save room details to the database[m
[32m+[m[32m            String photoPath = "/images/rooms/" + photoFileName; // Relative path to store in the database[m
[32m+[m[32m            return rs.addRoom(hotelId,roomNumber,roomType,price,isAvailable,photoPath);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m
[32m+[m[32m      @GetMapping(path="getAllRooms/{hotel_id}")[m
[32m+[m[32m      public ResponseEntity<List<Rooms>> getAllHotels(@PathVariable("hotel_id") int  hotel_id){[m
[32m+[m[32m            return rs.getAllRooms(hotel_id);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Booking.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Booking.java[m
[1mnew file mode 100644[m
[1mindex 0000000..14c110c[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Booking.java[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32mpublic class Booking {[m
[32m+[m
[32m+[m[32m      private int booking_id;[m
[32m+[m
[32m+[m[32m      private int user_id;[m
[32m+[m
[32m+[m[32m      private LocalDate bookingDate;[m
[32m+[m
[32m+[m[32m      private LocalDate checkInDate;[m
[32m+[m
[32m+[m[32m      private  LocalDate checkOutDate;[m
[32m+[m
[32m+[m[32m      private String status;[m
[32m+[m
[32m+[m[32m      private int TotalAmount;[m
[32m+[m
[32m+[m[32m      private String payments;[m
[32m+[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      private int single_room;[m
[32m+[m
[32m+[m[32m      private int double_room;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Hotel.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Hotel.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e93bb7b[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Hotel.java[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.entity;[m
[32m+[m[32m//Data Transfer Object[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class Hotel {[m
[32m+[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private float ratings;[m
[32m+[m[32m      private String address;[m
[32m+[m[32m      private String features;[m
[32m+[m[32m      private String city;[m
[32m+[m[32m      private String hotel_photo;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String location;[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/HotelUser.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/HotelUser.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d1e3135[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/HotelUser.java[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport lombok.NoArgsConstructor;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@NoArgsConstructor[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class HotelUser {[m
[32m+[m
[32m+[m[32m      private int id;[m
[32m+[m[32m      private String name;[m
[32m+[m[32m      private String email;[m
[32m+[m[32m      private String password;[m
[32m+[m[32m      private String mobile;[m
[32m+[m[32m      private String type;[m
[32m+[m[32m      private String photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Rooms.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Rooms.java[m
[1mnew file mode 100644[m
[1mindex 0000000..743befa[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/entity/Rooms.java[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.entity;[m
[32m+[m
[32m+[m[32mimport lombok.AllArgsConstructor;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32m@AllArgsConstructor[m
[32m+[m[32mpublic class Rooms {[m
[32m+[m
[32m+[m[32m      private int room_id;[m
[32m+[m
[32m+[m[32m      private int hotel_id;[m
[32m+[m
[32m+[m[32m      private int room_number;[m
[32m+[m
[32m+[m[32m      private String roomType;[m
[32m+[m
[32m+[m[32m      private int price;[m
[32m+[m
[32m+[m[32m      private String isAvailable;[m
[32m+[m
[32m+[m[32m      private String room_photo;[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/JWTService.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/JWTService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0300383[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/JWTService.java[m
[36m@@ -0,0 +1,140 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.service;//package com.HavenHub.api_gateway.service;[m
[32m+[m[32m//[m
[32m+[m[32m//import io.jsonwebtoken.Claims;[m
[32m+[m[32m//import io.jsonwebtoken.Jwts;[m
[32m+[m[32m//import io.jsonwebtoken.io.Decoders;[m
[32m+[m[32m//import io.jsonwebtoken.security.Keys;[m
[32m+[m[32m//import org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32m//import org.springframework.stereotype.Service;[m
[32m+[m[32m//[m
[32m+[m[32m//import javax.crypto.SecretKey;[m
[32m+[m[32m//import java.util.Date;[m
[32m+[m[32m//import java.util.HashMap;[m
[32m+[m[32m//import java.util.Map;[m
[32m+[m[32m//import java.util.function.Function;[m
[32m+[m[32m//[m
[32m+[m[32m//[m
[32m+[m[32m//@Service[m
[32m+[m[32m//public class JWTService {[m
[32m+[m[32m//      private String secretKey = "N2VGejNuOV5US3F2V3pUNzFNc3BLO0hOXFFGMnJYOV9zZmNEOXR1eEdkUHpIekx6WU5ab0N6N2V4YTd4bWpmbHQA";[m
[32m+[m[32m//[m
[32m+[m[32m//[m
[32m+[m[32m//      public JWTService() {[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      public String generateToken(String username) {[m
[32m+[m[32m//            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m//            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m//                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m//                    expiration(new Date(System.currentTimeMillis() + 108000000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private SecretKey getKey() {[m
[32m+[m[32m//            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m//            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      public String extractUserName(String token) {[m
[32m+[m[32m//            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m//            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m//            return claimResolver.apply(claims);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private Claims extractAllClaims(String token) {[m
[32m+[m[32m//            return Jwts.parser().[m
[32m+[m[32m//                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m//            String userName = this.extractUserName(token);[m
[32m+[m[32m//            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private boolean isTokenExpired(String token) {[m
[32m+[m[32m//            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//      private Date extractExpiration(String token) {[m
[32m+[m[32m//            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m//      }[m
[32m+[m[32m//[m
[32m+[m[32m//[m
[32m+[m[32m//}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mimport io.jsonwebtoken.Claims;[m
[32m+[m[32mimport io.jsonwebtoken.JwtBuilder;[m
[32m+[m[32mimport io.jsonwebtoken.Jwts;[m
[32m+[m[32mimport io.jsonwebtoken.io.Decoders;[m
[32m+[m[32mimport io.jsonwebtoken.security.Keys;[m
[32m+[m[32mimport java.security.NoSuchAlgorithmException;[m
[32m+[m[32mimport java.util.Base64;[m
[32m+[m[32mimport java.util.Date;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.Map;[m
[32m+[m[32mimport java.util.function.Function;[m
[32m+[m[32mimport javax.crypto.KeyGenerator;[m
[32m+[m[32mimport javax.crypto.SecretKey;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class JWTService {[m
[32m+[m[32m      private String secretKey = "";[m
[32m+[m
[32m+[m[32m      public JWTService() {[m
[32m+[m[32m            try {[m
[32m+[m[32m                  KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");[m
[32m+[m[32m                  SecretKey sk = keyGen.generateKey();[m
[32m+[m[32m                  this.secretKey = Base64.getEncoder().encodeToString(sk.getEncoded());[m
[32m+[m[32m            } catch (NoSuchAlgorithmException var3) {[m
[32m+[m[32m                  NoSuchAlgorithmException e = var3;[m
[32m+[m[32m                  throw new RuntimeException(e);[m
[32m+[m[32m            }[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String generateToken(String username) {[m
[32m+[m[32m            Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m            return Jwts.builder().claims().add(claims).subject(username).[m
[32m+[m[32m                    issuedAt(new Date(System.currentTimeMillis())).[m
[32m+[m[32m                    expiration(new Date(System.currentTimeMillis() + 1080000L)).and().signWith(this.getKey()).compact();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private SecretKey getKey() {[m
[32m+[m[32m            byte[] keyBytes = Decoders.BASE64.decode(this.secretKey);[m
[32m+[m[32m            return Keys.hmacShaKeyFor(keyBytes);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public String extractUserName(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getSubject);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {[m
[32m+[m[32m            Claims claims = this.extractAllClaims(token);[m
[32m+[m[32m            return claimResolver.apply(claims);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Claims extractAllClaims(String token) {[m
[32m+[m[32m            return Jwts.parser().[m
[32m+[m[32m                    verifyWith(this.getKey()).build().parseSignedClaims(token).getPayload();[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      public boolean validateTokens(String token, UserDetails userDetails) {[m
[32m+[m[32m            String userName = this.extractUserName(token);[m
[32m+[m[32m            return userName.equals(userDetails.getUsername()) && !this.isTokenExpired(token);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private boolean isTokenExpired(String token) {[m
[32m+[m[32m            return this.extractExpiration(token).before(new Date());[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      private Date extractExpiration(String token) {[m
[32m+[m[32m            return this.extractClaim(token, Claims::getExpiration);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/MyUserDetailsService.java b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/MyUserDetailsService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a722970[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/java/com/HavenHub/api_gateway/service/MyUserDetailsService.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway.service;[m
[32m+[m
[32m+[m
[32m+[m[32mimport com.HavenHub.api_gateway.DTO.UserPrincipalDTO;[m
[32m+[m[32mimport com.HavenHub.api_gateway.Feign.UserInterface;[m
[32m+[m[32mimport com.HavenHub.api_gateway.entity.HotelUser;[m
[32m+[m[32mimport org.apache.commons.logging.Log;[m
[32m+[m[32mimport org.apache.commons.logging.LogFactory;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetails;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UsernameNotFoundException;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class MyUserDetailsService implements UserDetailsService {[m
[32m+[m
[32m+[m[32m      @Autowired[m
[32m+[m[32m      private UserInterface ur;[m
[32m+[m
[32m+[m[32m      protected final Log logger = LogFactory.getLog(getClass());[m
[32m+[m
[32m+[m[32m      @Override[m
[32m+[m[32m      public UserDetails loadUserByUsername(String identifier) throws UsernameNotFoundException {[m
[32m+[m[32m            HotelUser user;[m
[32m+[m
[32m+[m[32m            // Determine if identifier is an email or username[m
[32m+[m[32m            if (identifier.contains("@")) { // Assume email if '@' is present[m
[32m+[m[32m                  logger.info("Email method called");[m
[32m+[m[32m                  user = ur.getByEmail(identifier).getBody();[m
[32m+[m[32m            } else {[m
[32m+[m[32m                  logger.info("Name method called");[m
[32m+[m[32m                  user = ur.getByName(identifier).getBody();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user == null) {[m
[32m+[m[32m                  logger.error("User Not found");[m
[32m+[m[32m                  throw new UsernameNotFoundException("User not found with identifier: " + identifier);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m
[32m+[m[32m            return new UserPrincipalDTO(user); // Use UserPrincipalDTO to return user details[m
[32m+[m[32m      }[m
[32m+[m[32m}[m
[1mdiff --git a/api-gatewayyy/src/main/resources/application.properties b/api-gatewayyy/src/main/resources/application.properties[m
[1mnew file mode 100644[m
[1mindex 0000000..8f9062c[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/main/resources/application.properties[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mspring.application.name=api-gateway[m
[32m+[m[32mserver.port=8080[m
[32m+[m
[32m+[m[32mspring.cloud.discovery.locator.enabled=true[m
[32m+[m
[32m+[m[32mspring.main.web-application-type=servlet[m
[32m+[m[32mspring.main.allow-bean-definition-overriding=true[m
[32m+[m[32meureka.client.service-url.defaultZone=http://localhost:8761/eureka/[m
[32m+[m[32meureka.instance.hostname=localhost[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# OAuth2 Client Registration[m
[32m+[m[32mspring.security.oauth2.client.registration.google.client-id=708656180433-9pfcgi05gpjd4chbpnlbdatmq2pi2k6p.apps.googleusercontent.com[m
[32m+[m[32mspring.security.oauth2.client.registration.google.client-secret=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[m
[32m+[m[32mspring.security.oauth2.client.registration.google.scope=openid,profile,email[m
[32m+[m[32mspring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mlogging.level.com.netflix.discovery=DEBUG[m
[32m+[m[32mlogging.level.org.springframework.cloud.netflix.eureka=DEBUG[m
[32m+[m[32mlogging.level.org.springframework.cloud.openfeign=DEBUG[m
[32m+[m[32mlogging.level.org.springframework=DEBUG[m
[32m+[m
[1mdiff --git a/api-gatewayyy/src/test/java/com/HavenHub/api_gateway/ApiGatewayApplicationTests.java b/api-gatewayyy/src/test/java/com/HavenHub/api_gateway/ApiGatewayApplicationTests.java[m
[1mnew file mode 100644[m
[1mindex 0000000..29ba22c[m
[1m--- /dev/null[m
[1m+++ b/api-gatewayyy/src/test/java/com/HavenHub/api_gateway/ApiGatewayApplicationTests.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.HavenHub.api_gateway;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m
[32m+[m[32m@SpringBootTest[m
[32m+[m[32mclass ApiGatewayApplicationTests {[m
[32m+[m
[32m+[m	[32m@Test[m
[32m+[m	[32mvoid contextLoads() {[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/service-registry b/service-registry[m
[1mnew file mode 160000[m
[1mindex 0000000..e2eaa72[m
[1m--- /dev/null[m
[1m+++ b/service-registry[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mSubproject commit e2eaa7297c7c478f789286827dc012a2c7039ef7[m
